// Code generated by go yacc.
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

//line sql.y:36

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) ival() IntVal {
	return u.val.(IntVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}

//line sql.y:259
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHARACTERISTICS = 57387
const CHECK = 57388
const COALESCE = 57389
const COLLATE = 57390
const COLLATION = 57391
const COLUMN = 57392
const COLUMNS = 57393
const COMMIT = 57394
const COMMITTED = 57395
const CONCAT = 57396
const CONFLICT = 57397
const CONSTRAINT = 57398
const COVERING = 57399
const CREATE = 57400
const CROSS = 57401
const CUBE = 57402
const CURRENT = 57403
const CURRENT_CATALOG = 57404
const CURRENT_DATE = 57405
const CURRENT_ROLE = 57406
const CURRENT_TIME = 57407
const CURRENT_TIMESTAMP = 57408
const CURRENT_USER = 57409
const CYCLE = 57410
const DATA = 57411
const DATABASE = 57412
const DATABASES = 57413
const DATE = 57414
const DAY = 57415
const DEC = 57416
const DECIMAL = 57417
const DEFAULT = 57418
const DEFERRABLE = 57419
const DELETE = 57420
const DESC = 57421
const DISTINCT = 57422
const DO = 57423
const DOUBLE = 57424
const DROP = 57425
const ELSE = 57426
const END = 57427
const ESCAPE = 57428
const EXCEPT = 57429
const EXISTS = 57430
const EXPLAIN = 57431
const EXTRACT = 57432
const FALSE = 57433
const FETCH = 57434
const FILTER = 57435
const FIRST = 57436
const FLOAT = 57437
const FOLLOWING = 57438
const FOR = 57439
const FORCE_INDEX = 57440
const FOREIGN = 57441
const FROM = 57442
const FULL = 57443
const GRANT = 57444
const GRANTS = 57445
const GREATEST = 57446
const GROUP = 57447
const GROUPING = 57448
const HAVING = 57449
const HIGH = 57450
const HOUR = 57451
const IF = 57452
const IFNULL = 57453
const IN = 57454
const INDEX = 57455
const INDEXES = 57456
const INITIALLY = 57457
const INNER = 57458
const INSERT = 57459
const INT = 57460
const INT64 = 57461
const INTEGER = 57462
const INTERSECT = 57463
const INTERVAL = 57464
const INTO = 57465
const IS = 57466
const ISOLATION = 57467
const JOIN = 57468
const KEY = 57469
const KEYS = 57470
const LATERAL = 57471
const LEADING = 57472
const LEAST = 57473
const LEFT = 57474
const LEVEL = 57475
const LIKE = 57476
const LIMIT = 57477
const LOCAL = 57478
const LOCALTIME = 57479
const LOCALTIMESTAMP = 57480
const LOW = 57481
const LSHIFT = 57482
const MATCH = 57483
const MINUTE = 57484
const MONTH = 57485
const NAME = 57486
const NAMES = 57487
const NATURAL = 57488
const NEXT = 57489
const NO = 57490
const NO_INDEX_JOIN = 57491
const NORMAL = 57492
const NOT = 57493
const NOTHING = 57494
const NULL = 57495
const NULLIF = 57496
const NULLS = 57497
const NUMERIC = 57498
const OF = 57499
const OFF = 57500
const OFFSET = 57501
const ON = 57502
const ONLY = 57503
const OR = 57504
const ORDER = 57505
const ORDINALITY = 57506
const OUT = 57507
const OUTER = 57508
const OVER = 57509
const OVERLAPS = 57510
const OVERLAY = 57511
const PARTIAL = 57512
const PARTITION = 57513
const PLACING = 57514
const POSITION = 57515
const PRECEDING = 57516
const PRECISION = 57517
const PRIMARY = 57518
const PRIORITY = 57519
const RANGE = 57520
const READ = 57521
const REAL = 57522
const RECURSIVE = 57523
const REF = 57524
const REFERENCES = 57525
const RENAME = 57526
const REPEATABLE = 57527
const RELEASE = 57528
const RESTRICT = 57529
const RETURNING = 57530
const REVOKE = 57531
const RIGHT = 57532
const ROLLBACK = 57533
const ROLLUP = 57534
const ROW = 57535
const ROWS = 57536
const RSHIFT = 57537
const SAVEPOINT = 57538
const SEARCH = 57539
const SECOND = 57540
const SELECT = 57541
const SERIALIZABLE = 57542
const SESSION = 57543
const SESSION_USER = 57544
const SET = 57545
const SHOW = 57546
const SIMILAR = 57547
const SIMPLE = 57548
const SMALLINT = 57549
const SNAPSHOT = 57550
const SOME = 57551
const SQL = 57552
const START = 57553
const STRICT = 57554
const STRING = 57555
const STORING = 57556
const SUBSTRING = 57557
const SYMMETRIC = 57558
const TABLE = 57559
const TABLES = 57560
const TEXT = 57561
const THEN = 57562
const TIME = 57563
const TIMESTAMP = 57564
const TO = 57565
const TRAILING = 57566
const TRANSACTION = 57567
const TREAT = 57568
const TRIM = 57569
const TRUE = 57570
const TRUNCATE = 57571
const TYPE = 57572
const UNBOUNDED = 57573
const UNCOMMITTED = 57574
const UNION = 57575
const UNIQUE = 57576
const UNKNOWN = 57577
const UPDATE = 57578
const USER = 57579
const USING = 57580
const VALID = 57581
const VALIDATE = 57582
const VALUE = 57583
const VALUES = 57584
const VARCHAR = 57585
const VARIADIC = 57586
const VARYING = 57587
const WHEN = 57588
const WHERE = 57589
const WINDOW = 57590
const WITH = 57591
const WITHIN = 57592
const WITHOUT = 57593
const YEAR = 57594
const ZONE = 57595
const NOT_LA = 57596
const WITH_LA = 57597
const POSTFIXOP = 57598
const UMINUS = 57599

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4228

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	276, 21,
	-2, 318,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 289,
	160, 289,
	188, 289,
	274, 289,
	276, 289,
	-2, 299,
	-1, 44,
	1, 292,
	160, 292,
	188, 292,
	274, 292,
	276, 292,
	-2, 298,
	-1, 53,
	1, 21,
	276, 21,
	-2, 318,
	-1, 235,
	1, 138,
	276, 138,
	-2, 791,
	-1, 266,
	135, 328,
	159, 328,
	-2, 295,
	-1, 269,
	135, 327,
	159, 327,
	-2, 293,
	-1, 379,
	135, 327,
	159, 327,
	-2, 296,
	-1, 436,
	273, 737,
	-2, 732,
	-1, 437,
	273, 738,
	-2, 733,
	-1, 443,
	6, 456,
	273, 456,
	-2, 871,
	-1, 465,
	6, 426,
	-2, 848,
	-1, 466,
	6, 453,
	273, 453,
	-2, 849,
	-1, 467,
	6, 434,
	-2, 850,
	-1, 468,
	6, 433,
	-2, 851,
	-1, 469,
	6, 453,
	273, 453,
	-2, 854,
	-1, 470,
	6, 453,
	273, 453,
	-2, 855,
	-1, 471,
	6, 454,
	-2, 858,
	-1, 472,
	6, 421,
	-2, 859,
	-1, 473,
	6, 421,
	-2, 860,
	-1, 474,
	6, 436,
	-2, 863,
	-1, 475,
	6, 422,
	-2, 868,
	-1, 476,
	6, 423,
	-2, 869,
	-1, 477,
	6, 424,
	-2, 870,
	-1, 478,
	6, 421,
	-2, 874,
	-1, 479,
	6, 427,
	-2, 879,
	-1, 480,
	6, 425,
	-2, 881,
	-1, 481,
	6, 455,
	-2, 885,
	-1, 482,
	6, 451,
	273, 451,
	-2, 889,
	-1, 740,
	87, 299,
	121, 299,
	135, 299,
	159, 299,
	163, 299,
	233, 299,
	-2, 558,
	-1, 748,
	273, 717,
	-2, 706,
	-1, 942,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 489,
	-1, 943,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 490,
	-1, 944,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 491,
	-1, 948,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 495,
	-1, 949,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 496,
	-1, 950,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 497,
	-1, 953,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 502,
	-1, 984,
	168, 628,
	-2, 631,
	-1, 1136,
	87, 299,
	121, 299,
	135, 299,
	159, 299,
	163, 299,
	233, 299,
	-2, 378,
	-1, 1144,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 503,
	-1, 1149,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 504,
	-1, 1168,
	168, 627,
	-2, 630,
	-1, 1311,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 505,
	-1, 1316,
	124, 0,
	-2, 515,
	-1, 1325,
	168, 629,
	-2, 632,
	-1, 1365,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 539,
	-1, 1366,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 540,
	-1, 1367,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 541,
	-1, 1371,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 545,
	-1, 1372,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 546,
	-1, 1373,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 547,
	-1, 1473,
	124, 0,
	-2, 516,
	-1, 1477,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 519,
	-1, 1478,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 521,
	-1, 1560,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 520,
	-1, 1561,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 522,
	-1, 1569,
	124, 0,
	-2, 548,
	-1, 1608,
	124, 0,
	-2, 549,
	-1, 1653,
	30, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 847,
}

const sqlNprod = 981
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 19797

var sqlAct = [...]int{

	981, 1652, 1635, 1514, 1673, 1613, 1636, 1651, 1637, 826,
	1577, 435, 1317, 434, 1435, 1547, 578, 1345, 427, 86,
	1459, 1436, 1403, 882, 1536, 270, 1453, 495, 819, 743,
	1226, 292, 869, 1447, 866, 1133, 275, 31, 1288, 1225,
	236, 1171, 483, 997, 745, 678, 1132, 890, 868, 1318,
	1036, 1297, 827, 399, 14, 485, 1080, 523, 1123, 804,
	1001, 969, 774, 501, 31, 966, 991, 893, 1119, 694,
	778, 551, 795, 861, 536, 367, 1085, 277, 43, 698,
	20, 10, 65, 700, 318, 6, 504, 269, 496, 506,
	31, 409, 400, 497, 533, 562, 314, 307, 871, 1039,
	310, 63, 368, 312, 44, 43, 280, 319, 67, 66,
	891, 381, 382, 68, 383, 45, 81, 233, 309, 553,
	549, 532, 303, 72, 1553, 824, 820, 1554, 274, 274,
	278, 43, 994, 525, 1649, 525, 1643, 1535, 1642, 886,
	1634, 886, 1629, 1476, 1610, 886, 1604, 1476, 267, 886,
	1596, 1587, 1562, 1535, 1535, 1476, 1090, 259, 429, 266,
	315, 1557, 288, 1544, 886, 295, 1535, 701, 995, 1534,
	304, 1519, 1535, 1518, 886, 298, 886, 1499, 1479, 282,
	1164, 1164, 1475, 1413, 1321, 1476, 886, 1164, 1279, 49,
	1131, 1275, 701, 703, 1166, 721, 722, 723, 515, 1167,
	1274, 996, 993, 1275, 1164, 724, 1243, 51, 1599, 1244,
	702, 705, 1241, 730, 1378, 1164, 1240, 484, 1239, 1164,
	1168, 1164, 1165, 1164, 1324, 887, 1103, 1164, 886, 442,
	792, 704, 52, 791, 1538, 530, 793, 718, 531, 47,
	49, 1121, 1170, 1164, 1105, 48, 886, 841, 49, 528,
	977, 498, 881, 855, 393, 499, 394, 998, 51, 672,
	671, 543, 542, 46, 335, 287, 51, 498, 53, 49,
	499, 499, 577, 354, 1650, 1648, 1605, 1543, 1504, 386,
	526, 1500, 526, 52, 401, 401, 1492, 51, 1491, 1486,
	47, 52, 380, 1485, 502, 731, 48, 1484, 47, 1483,
	437, 1470, 1430, 374, 48, 1393, 342, 729, 379, 1388,
	1387, 992, 52, 1386, 64, 1107, 1328, 726, 1306, 490,
	1287, 494, 823, 719, 1246, 1245, 1233, 1224, 1197, 1194,
	1192, 85, 1142, 343, 85, 1181, 1175, 1104, 489, 1051,
	1008, 85, 1007, 46, 1090, 725, 974, 751, 85, 85,
	393, 392, 85, 1578, 1347, 85, 85, 85, 1598, 1579,
	85, 85, 85, 85, 1571, 317, 318, 318, 1559, 702,
	524, 373, 675, 1550, 581, 371, 1541, 1533, 720, 1511,
	1497, 1464, 267, 85, 703, 686, 688, 1468, 728, 319,
	319, 1443, 695, 266, 1315, 1305, 1285, 582, 1284, 1282,
	1258, 1257, 705, 1223, 1189, 734, 735, 736, 737, 738,
	395, 1188, 304, 1180, 741, 1429, 1161, 1157, 971, 779,
	782, 1065, 704, 1064, 516, 1198, 975, 1046, 1006, 885,
	674, 784, 772, 771, 754, 770, 703, 727, 769, 715,
	716, 717, 768, 714, 711, 712, 713, 706, 707, 708,
	709, 710, 748, 767, 705, 1052, 1558, 498, 540, 539,
	766, 499, 765, 764, 1053, 763, 762, 761, 566, 573,
	760, 759, 758, 662, 704, 1065, 666, 667, 668, 665,
	669, 749, 747, 1198, 46, 676, 410, 673, 293, 397,
	746, 267, 682, 1308, 267, 267, 684, 683, 1307, 788,
	1198, 696, 690, 491, 1555, 691, 692, 1434, 572, 1091,
	1143, 363, 349, 742, 756, 1448, 789, 820, 366, 581,
	1348, 1002, 787, 775, 1198, 1087, 1619, 1211, 1662, 85,
	85, 1421, 776, 777, 1184, 847, 252, 264, 289, 348,
	798, 289, 582, 300, 780, 258, 289, 257, 300, 783,
	253, 318, 389, 390, 31, 1212, 1527, 1526, 1270, 85,
	1586, 85, 1250, 85, 1099, 85, 719, 31, 227, 836,
	312, 1249, 822, 785, 319, 1179, 1178, 797, 1177, 1176,
	85, 809, 811, 1269, 1663, 65, 703, 507, 1145, 508,
	958, 85, 840, 816, 860, 815, 964, 581, 370, 932,
	261, 968, 85, 85, 705, 85, 801, 962, 43, 1621,
	1213, 67, 66, 1212, 752, 843, 68, 968, 1337, 849,
	582, 720, 814, 487, 704, 835, 844, 315, 839, 842,
	837, 845, 838, 817, 703, 85, 519, 85, 706, 707,
	708, 709, 710, 834, 1585, 848, 998, 317, 317, 1198,
	1516, 1467, 705, 509, 1670, 580, 85, 1081, 85, 85,
	85, 85, 346, 85, 797, 1260, 57, 960, 1213, 959,
	796, 85, 704, 965, 998, 879, 880, 85, 718, 1199,
	1200, 1201, 1202, 1203, 262, 1079, 714, 711, 712, 713,
	706, 707, 708, 709, 710, 85, 1002, 347, 85, 513,
	1580, 265, 512, 401, 525, 58, 345, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 1100, 888,
	507, 805, 508, 1207, 1204, 1205, 1206, 1199, 1200, 1201,
	1202, 1203, 1662, 1098, 961, 931, 773, 289, 864, 972,
	1267, 963, 581, 896, 1199, 1200, 1201, 1202, 1203, 922,
	1567, 1009, 60, 1020, 719, 1030, 1032, 1037, 1040, 1041,
	1042, 787, 369, 403, 863, 582, 787, 492, 1669, 1212,
	1201, 1202, 1203, 1631, 808, 1261, 865, 1198, 289, 518,
	1147, 982, 502, 1022, 85, 895, 509, 338, 340, 1632,
	580, 507, 55, 508, 994, 61, 967, 1517, 85, 739,
	510, 1187, 85, 344, 1050, 85, 85, 1298, 274, 720,
	85, 1082, 85, 85, 59, 85, 1639, 1676, 85, 85,
	85, 973, 317, 1060, 1213, 85, 85, 794, 1638, 1661,
	995, 1659, 708, 709, 710, 56, 978, 983, 851, 986,
	956, 526, 1062, 1446, 853, 1054, 1668, 486, 922, 364,
	1084, 807, 902, 439, 1031, 345, 875, 509, 357, 854,
	1043, 1044, 1045, 996, 993, 318, 384, 852, 580, 336,
	334, 385, 695, 1055, 714, 711, 712, 713, 706, 707,
	708, 709, 710, 1093, 1252, 1640, 1495, 1076, 319, 1521,
	385, 1075, 1206, 1199, 1200, 1201, 1202, 1203, 1092, 62,
	1089, 365, 1012, 1520, 1094, 1108, 1095, 1212, 1106, 806,
	1096, 921, 31, 1097, 273, 1509, 1102, 1101, 1333, 998,
	1059, 1641, 957, 901, 876, 1674, 1683, 1334, 1614, 681,
	1114, 677, 1138, 1417, 571, 559, 570, 384, 564, 54,
	1374, 1112, 670, 510, 954, 1144, 544, 1510, 272, 1149,
	1067, 902, 1137, 43, 1456, 85, 1116, 1115, 505, 1141,
	1335, 1117, 1213, 1496, 1675, 1066, 85, 85, 1163, 1126,
	786, 1015, 1154, 992, 1293, 1292, 344, 780, 1172, 783,
	1677, 777, 776, 1152, 1129, 1462, 302, 272, 289, 376,
	274, 300, 85, 1185, 1296, 85, 830, 1190, 1420, 70,
	1127, 300, 1169, 1682, 300, 1419, 574, 1016, 1416, 1148,
	921, 1375, 1146, 1289, 510, 955, 998, 1376, 741, 1120,
	1005, 1570, 901, 580, 1037, 1037, 1037, 1207, 1204, 1205,
	1206, 1199, 1200, 1201, 1202, 1203, 1463, 1494, 1227, 73,
	1017, 1014, 548, 1314, 1248, 1150, 1193, 1156, 846, 1155,
	701, 1183, 576, 362, 360, 1255, 359, 358, 1128, 78,
	271, 1160, 355, 301, 74, 1162, 575, 1228, 757, 664,
	1004, 1400, 401, 546, 1230, 1231, 1232, 1265, 1173, 1174,
	1418, 1263, 502, 75, 547, 85, 85, 85, 1251, 1110,
	877, 85, 874, 529, 85, 527, 1018, 522, 77, 514,
	85, 85, 85, 85, 85, 511, 85, 85, 1276, 1247,
	1342, 1528, 1663, 1254, 85, 568, 85, 1222, 883, 1264,
	1151, 1266, 85, 351, 387, 1271, 1530, 1153, 1235, 813,
	1272, 85, 85, 1277, 1310, 1256, 1311, 85, 1302, 1268,
	1273, 581, 285, 1283, 1281, 1278, 317, 1316, 797, 689,
	1013, 797, 289, 3, 812, 1326, 1538, 810, 703, 1291,
	703, 1326, 1294, 85, 582, 85, 85, 1301, 85, 1299,
	1300, 884, 1607, 1582, 1295, 1343, 705, 85, 289, 1290,
	76, 391, 1600, 85, 1352, 85, 388, 1354, 1330, 1331,
	1332, 1122, 825, 352, 565, 560, 704, 251, 704, 697,
	69, 541, 1327, 922, 286, 1140, 1680, 294, 1681, 1198,
	703, 1336, 1338, 1339, 1461, 1481, 1469, 79, 1383, 1384,
	856, 1349, 73, 857, 1394, 1353, 1340, 1390, 1391, 1392,
	80, 1351, 1309, 1126, 1242, 254, 255, 922, 1355, 1049,
	1048, 1047, 78, 999, 922, 858, 1381, 74, 1129, 1341,
	859, 1322, 1409, 1409, 1404, 750, 1382, 1198, 1124, 1460,
	260, 1515, 1402, 71, 1127, 663, 75, 356, 1488, 1385,
	1630, 1056, 1186, 1566, 1399, 922, 1395, 1546, 1125, 1003,
	1449, 77, 1410, 1410, 1441, 755, 1440, 1441, 25, 1440,
	1445, 1442, 1455, 1438, 1442, 415, 1401, 1253, 870, 583,
	1086, 31, 569, 558, 438, 1473, 902, 361, 1086, 1444,
	1477, 1478, 552, 1379, 561, 1480, 1011, 924, 1474, 1431,
	1482, 488, 1128, 1433, 1389, 440, 899, 1414, 1415, 441,
	1451, 1452, 1466, 900, 1457, 1487, 781, 428, 897, 1490,
	902, 313, 828, 1000, 1182, 753, 414, 902, 420, 419,
	979, 411, 1109, 1458, 1130, 341, 85, 1405, 1405, 1406,
	1406, 922, 231, 76, 232, 921, 1083, 1428, 821, 1498,
	1454, 289, 878, 685, 1493, 1465, 1262, 901, 902, 263,
	1450, 85, 1408, 1408, 1195, 1029, 1021, 1212, 1019, 1411,
	1411, 1010, 372, 500, 85, 829, 85, 398, 85, 921,
	79, 85, 353, 889, 1139, 396, 921, 693, 284, 283,
	1522, 901, 85, 867, 350, 85, 924, 545, 901, 1505,
	850, 85, 580, 1506, 422, 85, 517, 85, 256, 1581,
	1540, 1441, 1122, 1440, 1529, 1508, 1618, 921, 1442, 1259,
	1407, 1407, 1213, 50, 19, 1441, 1551, 1440, 1542, 901,
	17, 16, 1442, 1539, 15, 83, 1531, 1537, 237, 13,
	12, 1523, 1560, 1561, 902, 83, 11, 922, 18, 1549,
	1524, 1525, 281, 281, 1126, 1113, 291, 9, 85, 291,
	297, 291, 8, 7, 291, 305, 291, 237, 24, 1129,
	23, 22, 1574, 5, 1552, 4, 2, 1, 1565, 1124,
	1572, 0, 1576, 0, 0, 1127, 0, 337, 1204, 1205,
	1206, 1199, 1200, 1201, 1202, 1203, 1563, 0, 0, 1125,
	1575, 0, 922, 921, 502, 0, 0, 1023, 1589, 0,
	0, 0, 0, 0, 1556, 901, 0, 1441, 1597, 1440,
	85, 85, 85, 922, 1442, 0, 0, 1590, 85, 85,
	1591, 923, 0, 1593, 85, 787, 85, 898, 85, 85,
	85, 85, 1603, 1128, 1602, 581, 85, 830, 0, 1592,
	902, 0, 0, 0, 1609, 85, 0, 703, 0, 0,
	0, 0, 1606, 85, 85, 0, 0, 85, 582, 0,
	1625, 0, 0, 0, 0, 705, 85, 85, 289, 0,
	1441, 289, 1440, 1626, 0, 1627, 1622, 1442, 1628, 1623,
	1645, 1624, 0, 1620, 0, 704, 0, 922, 1644, 0,
	1601, 1646, 1656, 1656, 0, 902, 0, 0, 0, 921,
	1657, 1595, 0, 239, 1660, 1658, 0, 1647, 85, 0,
	1664, 901, 0, 1666, 1656, 1667, 902, 250, 1615, 1616,
	923, 0, 0, 237, 237, 0, 898, 1679, 1678, 0,
	0, 0, 0, 0, 0, 1665, 0, 0, 0, 0,
	703, 1656, 1684, 0, 0, 0, 0, 0, 0, 0,
	241, 0, 0, 83, 921, 291, 0, 237, 705, 377,
	0, 85, 0, 85, 0, 85, 901, 1633, 0, 240,
	242, 0, 85, 0, 281, 921, 0, 719, 704, 0,
	0, 0, 0, 0, 0, 291, 0, 901, 0, 0,
	902, 0, 0, 0, 0, 0, 291, 291, 0, 520,
	1023, 1023, 243, 0, 0, 0, 0, 85, 0, 85,
	0, 0, 244, 245, 1424, 0, 0, 85, 0, 0,
	1158, 1159, 1432, 0, 0, 85, 0, 246, 0, 537,
	0, 537, 720, 0, 0, 0, 0, 0, 0, 289,
	289, 924, 1198, 289, 1214, 1215, 1216, 0, 0, 921,
	237, 0, 537, 237, 237, 237, 0, 237, 1023, 1023,
	1023, 901, 0, 0, 0, 83, 0, 0, 0, 0,
	719, 680, 0, 0, 0, 924, 0, 0, 1219, 1220,
	1221, 0, 924, 0, 0, 0, 1211, 85, 85, 281,
	0, 85, 699, 0, 0, 0, 0, 0, 0, 85,
	713, 706, 707, 708, 709, 710, 0, 0, 0, 416,
	32, 85, 0, 924, 0, 0, 580, 247, 0, 0,
	248, 0, 0, 0, 249, 720, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 32, 0, 85,
	85, 85, 0, 85, 0, 0, 0, 0, 0, 703,
	0, 0, 0, 268, 0, 0, 276, 0, 1513, 0,
	85, 0, 0, 32, 0, 0, 0, 705, 0, 0,
	0, 0, 1212, 0, 276, 0, 0, 0, 0, 0,
	1023, 1023, 85, 0, 0, 0, 0, 704, 291, 0,
	0, 0, 0, 1545, 706, 707, 708, 709, 710, 924,
	1312, 1313, 802, 289, 0, 0, 291, 0, 0, 291,
	818, 0, 0, 0, 291, 0, 832, 833, 0, 291,
	0, 0, 291, 237, 237, 0, 0, 1213, 0, 537,
	699, 0, 0, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
	1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
	1023, 0, 1023, 1356, 1357, 1358, 1359, 1360, 1361, 1362,
	1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372,
	1373, 0, 1377, 0, 0, 923, 0, 0, 0, 719,
	0, 898, 0, 0, 0, 0, 0, 0, 1208, 1209,
	1210, 0, 1207, 1204, 1205, 1206, 1199, 1200, 1201, 1202,
	1203, 0, 0, 0, 0, 924, 0, 0, 703, 923,
	721, 722, 723, 0, 0, 898, 923, 0, 0, 0,
	724, 0, 898, 0, 0, 0, 705, 1617, 730, 0,
	0, 0, 0, 0, 720, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 704, 923, 0, 0,
	0, 0, 718, 898, 0, 0, 0, 0, 0, 862,
	924, 0, 0, 0, 0, 0, 0, 0, 830, 0,
	291, 802, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 924, 0, 0, 0, 0, 0, 268, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 0, 0, 237,
	711, 712, 713, 706, 707, 708, 709, 710, 0, 0,
	731, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 729, 1198, 0, 1214, 1215, 1216, 0, 0,
	0, 0, 726, 923, 0, 1472, 0, 0, 719, 898,
	0, 0, 0, 0, 1023, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 924, 0, 0, 0, 0,
	725, 0, 0, 0, 1512, 0, 0, 1211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 291,
	1057, 1058, 0, 720, 0, 802, 268, 0, 1063, 268,
	268, 0, 0, 728, 1068, 1069, 1071, 1073, 1074, 0,
	1077, 1078, 0, 0, 0, 0, 0, 0, 291, 0,
	1088, 0, 0, 740, 0, 0, 291, 744, 1023, 0,
	0, 0, 0, 0, 0, 862, 537, 1217, 0, 923,
	0, 862, 0, 0, 0, 898, 0, 0, 1569, 0,
	0, 0, 727, 1212, 715, 716, 717, 0, 714, 711,
	712, 713, 706, 707, 708, 709, 710, 680, 0, 237,
	291, 0, 1111, 0, 0, 1501, 0, 0, 0, 0,
	0, 1118, 0, 0, 0, 0, 0, 1135, 0, 291,
	0, 0, 0, 0, 923, 0, 0, 0, 0, 703,
	898, 721, 722, 723, 1023, 0, 0, 0, 1213, 0,
	0, 724, 0, 0, 0, 923, 0, 705, 703, 730,
	0, 898, 0, 0, 1608, 0, 0, 32, 0, 0,
	0, 0, 0, 0, 0, 0, 705, 704, 730, 0,
	32, 0, 0, 718, 0, 0, 0, 703, 0, 721,
	722, 723, 0, 0, 0, 0, 704, 0, 0, 724,
	0, 0, 718, 0, 0, 705, 0, 730, 0, 1208,
	1209, 1210, 0, 1207, 1204, 1205, 1206, 1199, 1200, 1201,
	1202, 1203, 0, 0, 0, 704, 0, 0, 0, 923,
	0, 718, 0, 0, 0, 898, 0, 0, 0, 0,
	0, 731, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 729, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 726, 0, 0, 0, 0, 0, 719,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 726, 0, 0, 0, 0, 0, 719, 731,
	0, 725, 0, 0, 0, 0, 0, 0, 0, 0,
	699, 729, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 726, 0, 0, 0, 0, 0, 719, 0, 0,
	0, 0, 0, 0, 720, 291, 0, 0, 0, 0,
	0, 0, 0, 0, 728, 0, 0, 0, 1280, 725,
	802, 0, 680, 720, 0, 1286, 0, 0, 0, 0,
	0, 892, 0, 728, 0, 0, 291, 0, 0, 291,
	0, 0, 0, 0, 0, 1135, 0, 0, 0, 1304,
	0, 1135, 720, 0, 0, 0, 1198, 0, 1214, 1215,
	1216, 970, 728, 727, 0, 715, 716, 717, 1471, 714,
	711, 712, 713, 706, 707, 708, 709, 710, 0, 0,
	0, 0, 727, 0, 0, 0, 1238, 0, 714, 711,
	712, 713, 706, 707, 708, 709, 710, 0, 0, 0,
	1211, 0, 1346, 0, 0, 0, 0, 0, 0, 0,
	0, 727, 0, 715, 716, 717, 0, 714, 711, 712,
	713, 706, 707, 708, 709, 710, 0, 0, 0, 0,
	0, 0, 0, 0, 1237, 0, 0, 703, 0, 721,
	722, 723, 0, 0, 0, 0, 0, 0, 0, 724,
	0, 0, 0, 276, 0, 705, 0, 730, 0, 0,
	0, 0, 0, 0, 1397, 1398, 802, 0, 0, 0,
	1217, 0, 699, 699, 0, 704, 0, 0, 1422, 0,
	1423, 718, 291, 1425, 1426, 1427, 1212, 0, 0, 0,
	291, 0, 0, 0, 0, 0, 0, 1437, 0, 802,
	1437, 0, 0, 0, 0, 0, 0, 291, 291, 0,
	0, 291, 0, 0, 0, 32, 0, 0, 0, 0,
	699, 1135, 0, 0, 1136, 703, 0, 721, 722, 723,
	0, 0, 0, 0, 0, 0, 0, 724, 0, 731,
	0, 1213, 0, 705, 0, 730, 0, 0, 0, 0,
	0, 729, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 726, 1489, 704, 0, 0, 0, 719, 0, 718,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 970, 0, 725,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 740, 1208, 1209, 1210, 0, 1207, 1204, 1205, 1206,
	1199, 1200, 1201, 1202, 1203, 802, 0, 1507, 0, 237,
	0, 0, 720, 0, 0, 0, 291, 731, 0, 0,
	0, 0, 728, 0, 0, 0, 0, 0, 0, 729,
	0, 0, 0, 0, 1437, 0, 0, 0, 0, 726,
	0, 0, 0, 0, 0, 719, 0, 740, 1437, 0,
	0, 291, 0, 1548, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 0, 725, 0, 699,
	0, 727, 0, 715, 716, 717, 0, 714, 711, 712,
	713, 706, 707, 708, 709, 710, 0, 0, 0, 0,
	0, 0, 0, 0, 1236, 0, 0, 0, 0, 0,
	720, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	728, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1583, 1584, 0, 0, 1588, 0, 0, 0, 0,
	1437, 892, 0, 237, 892, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 699, 0, 0, 0, 727,
	0, 715, 716, 717, 0, 714, 711, 712, 713, 706,
	707, 708, 709, 710, 0, 0, 0, 0, 0, 1612,
	0, 0, 84, 699, 699, 291, 0, 237, 0, 0,
	0, 0, 0, 0, 87, 88, 0, 89, 0, 0,
	0, 0, 0, 1437, 1548, 0, 90, 91, 184, 185,
	186, 92, 187, 188, 0, 93, 189, 190, 94, 0,
	0, 191, 192, 193, 0, 194, 291, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	195, 106, 196, 197, 0, 0, 107, 0, 0, 0,
	108, 109, 0, 0, 0, 0, 198, 110, 199, 0,
	0, 111, 112, 200, 113, 0, 0, 0, 0, 0,
	0, 114, 201, 0, 202, 0, 115, 116, 203, 204,
	0, 0, 117, 0, 32, 118, 205, 206, 207, 0,
	208, 0, 0, 119, 0, 120, 121, 0, 0, 209,
	0, 122, 892, 892, 123, 0, 892, 124, 0, 125,
	126, 127, 128, 129, 0, 130, 131, 0, 132, 0,
	133, 0, 210, 134, 211, 135, 136, 0, 0, 290,
	0, 0, 137, 212, 0, 138, 0, 213, 139, 140,
	0, 214, 141, 215, 0, 142, 143, 144, 216, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 0, 152,
	153, 217, 154, 0, 238, 155, 156, 49, 157, 158,
	0, 159, 160, 0, 161, 218, 162, 0, 163, 164,
	166, 219, 165, 220, 0, 51, 167, 168, 0, 221,
	222, 0, 0, 169, 223, 224, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 0, 0, 176, 177, 178,
	320, 226, 0, 179, 0, 0, 0, 47, 180, 181,
	182, 183, 0, 48, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 894, 0, 0, 1532, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 0, 0, 0, 0, 892, 0, 0, 0,
	0, 0, 0, 87, 88, 584, 89, 585, 586, 587,
	588, 589, 590, 591, 592, 90, 91, 184, 185, 186,
	92, 187, 188, 593, 93, 189, 190, 94, 594, 595,
	191, 192, 193, 596, 194, 597, 321, 598, 95, 96,
	97, 0, 98, 599, 99, 600, 322, 100, 101, 601,
	602, 603, 604, 605, 606, 102, 103, 104, 105, 195,
	106, 196, 197, 607, 608, 107, 609, 610, 611, 108,
	109, 612, 613, 740, 614, 198, 110, 199, 615, 616,
	111, 112, 200, 113, 617, 0, 618, 619, 323, 620,
	114, 201, 621, 202, 622, 115, 116, 203, 204, 623,
	624, 117, 625, 324, 118, 205, 206, 207, 626, 208,
	627, 325, 119, 326, 120, 121, 628, 629, 209, 327,
	122, 328, 630, 123, 631, 632, 124, 0, 125, 126,
	127, 128, 129, 329, 130, 131, 0, 132, 633, 133,
	634, 210, 134, 211, 135, 136, 635, 636, 637, 638,
	639, 137, 212, 330, 138, 331, 213, 139, 140, 640,
	214, 141, 215, 641, 142, 143, 144, 216, 145, 146,
	642, 148, 149, 147, 150, 643, 151, 332, 152, 153,
	217, 154, 0, 238, 155, 156, 644, 157, 158, 645,
	159, 160, 333, 161, 218, 162, 646, 163, 164, 166,
	219, 165, 220, 647, 648, 167, 168, 649, 221, 222,
	650, 651, 169, 223, 224, 652, 170, 171, 172, 173,
	653, 654, 174, 175, 655, 656, 176, 177, 178, 225,
	226, 657, 179, 658, 659, 660, 661, 180, 181, 182,
	183, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1303, 87, 88, 584,
	89, 585, 586, 587, 588, 589, 590, 591, 592, 90,
	91, 184, 185, 186, 92, 187, 188, 593, 93, 189,
	190, 94, 594, 595, 191, 192, 193, 596, 194, 597,
	321, 598, 95, 96, 97, 0, 98, 599, 99, 600,
	322, 100, 101, 601, 602, 603, 604, 605, 606, 102,
	103, 104, 105, 195, 106, 196, 197, 607, 608, 107,
	609, 610, 611, 108, 109, 612, 613, 0, 614, 198,
	110, 199, 615, 616, 111, 112, 200, 113, 617, 0,
	618, 619, 323, 620, 114, 201, 621, 202, 622, 115,
	116, 203, 204, 623, 624, 117, 625, 324, 118, 205,
	206, 207, 626, 208, 627, 325, 119, 326, 120, 121,
	628, 629, 209, 327, 122, 328, 630, 123, 631, 632,
	124, 0, 125, 126, 127, 128, 129, 329, 130, 131,
	0, 132, 633, 133, 634, 210, 134, 211, 135, 136,
	635, 636, 637, 638, 639, 137, 212, 330, 138, 331,
	213, 139, 140, 640, 214, 141, 215, 641, 142, 143,
	144, 216, 145, 146, 642, 148, 149, 147, 150, 643,
	151, 332, 152, 153, 217, 154, 0, 238, 155, 156,
	644, 157, 158, 645, 159, 160, 333, 161, 218, 162,
	646, 163, 164, 166, 219, 165, 220, 647, 648, 167,
	168, 649, 221, 222, 650, 651, 169, 223, 224, 652,
	170, 171, 172, 173, 653, 654, 174, 175, 655, 656,
	176, 177, 178, 225, 226, 657, 179, 658, 659, 660,
	661, 180, 181, 182, 183, 0, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 790, 87, 88,
	584, 89, 585, 586, 587, 588, 589, 590, 591, 592,
	90, 91, 184, 185, 186, 92, 187, 188, 593, 93,
	189, 190, 94, 594, 595, 191, 192, 193, 596, 194,
	597, 321, 598, 95, 96, 97, 0, 98, 599, 99,
	600, 322, 100, 101, 601, 602, 603, 604, 605, 606,
	102, 103, 104, 105, 195, 106, 196, 197, 607, 608,
	107, 609, 610, 611, 108, 109, 612, 613, 0, 614,
	198, 110, 199, 615, 616, 111, 112, 200, 113, 617,
	0, 618, 619, 323, 620, 114, 201, 621, 202, 622,
	115, 116, 203, 204, 623, 624, 117, 625, 324, 118,
	205, 206, 207, 626, 208, 627, 325, 119, 326, 120,
	121, 628, 629, 209, 327, 122, 328, 630, 123, 631,
	632, 124, 0, 125, 126, 127, 128, 129, 329, 130,
	131, 0, 132, 633, 133, 634, 210, 134, 211, 135,
	136, 635, 636, 637, 638, 639, 137, 212, 330, 138,
	331, 213, 139, 140, 640, 214, 141, 215, 641, 142,
	143, 144, 216, 145, 146, 642, 148, 149, 147, 150,
	643, 151, 332, 152, 153, 217, 154, 0, 238, 155,
	156, 644, 157, 158, 645, 159, 160, 333, 161, 218,
	162, 646, 163, 164, 166, 219, 165, 220, 647, 648,
	167, 168, 649, 221, 222, 650, 651, 169, 223, 224,
	652, 170, 171, 172, 173, 653, 654, 174, 175, 655,
	656, 176, 177, 178, 225, 226, 657, 179, 658, 659,
	660, 661, 180, 181, 182, 183, 436, 424, 425, 426,
	423, 412, 0, 0, 0, 0, 0, 0, 87, 88,
	988, 89, 0, 0, 0, 0, 418, 0, 0, 0,
	90, 91, 184, 465, 466, 92, 467, 468, 0, 93,
	189, 190, 94, 433, 451, 469, 470, 193, 0, 461,
	0, 444, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 322, 100, 101, 0, 445, 447, 0, 446, 448,
	102, 103, 104, 105, 471, 106, 472, 473, 0, 0,
	107, 0, 989, 0, 464, 109, 0, 0, 0, 0,
	417, 110, 452, 431, 0, 111, 112, 474, 113, 0,
	0, 0, 0, 323, 0, 114, 462, 0, 202, 0,
	115, 116, 458, 460, 0, 0, 117, 0, 324, 118,
	475, 476, 477, 0, 443, 0, 325, 119, 326, 120,
	121, 0, 0, 463, 327, 122, 328, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 329, 130,
	131, 0, 132, 407, 133, 432, 459, 134, 478, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 330, 138,
	331, 453, 139, 140, 0, 454, 141, 215, 0, 142,
	143, 144, 479, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 332, 152, 153, 421, 154, 0, 238, 155,
	156, 0, 157, 158, 449, 159, 160, 333, 161, 480,
	162, 0, 163, 164, 166, 219, 165, 455, 0, 0,
	167, 168, 0, 221, 481, 0, 0, 169, 456, 457,
	430, 170, 171, 172, 173, 0, 0, 174, 175, 450,
	0, 176, 177, 178, 225, 482, 987, 179, 0, 0,
	0, 0, 180, 181, 182, 183, 408, 0, 436, 424,
	425, 426, 423, 412, 0, 0, 404, 405, 990, 0,
	87, 88, 406, 89, 0, 413, 985, 0, 418, 0,
	0, 0, 90, 91, 184, 465, 466, 92, 467, 468,
	0, 93, 189, 190, 94, 433, 451, 469, 470, 193,
	0, 461, 0, 444, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 322, 100, 101, 0, 445, 447, 0,
	446, 448, 102, 103, 104, 105, 471, 106, 472, 473,
	503, 0, 107, 0, 0, 0, 464, 109, 0, 0,
	0, 0, 417, 110, 452, 431, 0, 111, 112, 474,
	113, 0, 0, 0, 0, 323, 0, 114, 462, 0,
	202, 0, 115, 116, 458, 460, 0, 0, 117, 0,
	324, 118, 475, 476, 477, 0, 443, 0, 325, 119,
	326, 120, 121, 0, 0, 463, 327, 122, 328, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 129,
	329, 130, 131, 0, 132, 407, 133, 432, 459, 134,
	478, 135, 136, 0, 0, 0, 0, 0, 137, 212,
	330, 138, 331, 453, 139, 140, 0, 454, 141, 215,
	0, 142, 143, 144, 479, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 332, 152, 153, 421, 154, 0,
	238, 155, 156, 49, 157, 158, 449, 159, 160, 333,
	161, 480, 162, 0, 163, 164, 166, 219, 165, 455,
	0, 51, 167, 168, 0, 221, 481, 0, 0, 169,
	456, 457, 430, 170, 171, 172, 173, 0, 0, 174,
	175, 450, 0, 176, 177, 178, 320, 482, 0, 179,
	0, 0, 0, 47, 180, 181, 182, 183, 408, 48,
	436, 424, 425, 426, 423, 412, 0, 0, 404, 405,
	0, 0, 87, 88, 406, 89, 0, 413, 0, 0,
	418, 0, 0, 0, 90, 91, 184, 465, 466, 92,
	467, 468, 0, 93, 189, 190, 94, 433, 451, 469,
	470, 193, 0, 461, 0, 444, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 322, 100, 101, 0, 445,
	447, 0, 446, 448, 102, 103, 104, 105, 471, 106,
	472, 473, 0, 0, 107, 0, 0, 0, 464, 109,
	0, 0, 0, 0, 417, 110, 452, 431, 0, 111,
	112, 474, 113, 0, 0, 0, 0, 323, 0, 114,
	462, 0, 202, 0, 115, 116, 458, 460, 0, 0,
	117, 0, 324, 118, 475, 476, 477, 0, 443, 0,
	325, 119, 326, 120, 121, 0, 0, 463, 327, 122,
	328, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 329, 130, 131, 0, 132, 407, 133, 432,
	459, 134, 478, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 330, 138, 331, 453, 139, 140, 0, 454,
	141, 215, 0, 142, 143, 144, 479, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 332, 152, 153, 421,
	154, 0, 238, 155, 156, 49, 157, 158, 449, 159,
	160, 333, 161, 480, 162, 0, 163, 164, 166, 219,
	165, 455, 0, 51, 167, 168, 0, 221, 481, 0,
	0, 169, 456, 457, 430, 170, 171, 172, 173, 0,
	0, 174, 175, 450, 0, 176, 177, 178, 320, 482,
	0, 179, 0, 0, 0, 47, 180, 181, 182, 183,
	408, 48, 436, 424, 425, 426, 423, 412, 0, 0,
	404, 405, 0, 0, 87, 88, 406, 89, 0, 413,
	0, 0, 418, 0, 0, 0, 90, 91, 184, 465,
	466, 92, 467, 468, 1033, 93, 189, 190, 94, 433,
	451, 469, 470, 193, 0, 461, 0, 444, 0, 95,
	96, 97, 0, 98, 0, 99, 0, 322, 100, 101,
	0, 445, 447, 0, 446, 448, 102, 103, 104, 105,
	471, 106, 472, 473, 0, 0, 107, 0, 0, 0,
	464, 109, 0, 0, 0, 0, 417, 110, 452, 431,
	0, 111, 112, 474, 113, 0, 0, 0, 1038, 323,
	0, 114, 462, 0, 202, 0, 115, 116, 458, 460,
	0, 0, 117, 0, 324, 118, 475, 476, 477, 0,
	443, 0, 325, 119, 326, 120, 121, 0, 1034, 463,
	327, 122, 328, 0, 123, 0, 0, 124, 0, 125,
	126, 127, 128, 129, 329, 130, 131, 0, 132, 407,
	133, 432, 459, 134, 478, 135, 136, 0, 0, 0,
	0, 0, 137, 212, 330, 138, 331, 453, 139, 140,
	0, 454, 141, 215, 0, 142, 143, 144, 479, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 332, 152,
	153, 421, 154, 0, 238, 155, 156, 0, 157, 158,
	449, 159, 160, 333, 161, 480, 162, 0, 163, 164,
	166, 219, 165, 455, 0, 0, 167, 168, 0, 221,
	481, 0, 1035, 169, 456, 457, 430, 170, 171, 172,
	173, 0, 0, 174, 175, 450, 0, 176, 177, 178,
	225, 482, 0, 179, 0, 0, 0, 0, 180, 181,
	182, 183, 408, 0, 436, 424, 425, 426, 423, 412,
	0, 0, 404, 405, 0, 0, 87, 88, 406, 89,
	0, 413, 0, 0, 418, 0, 0, 0, 90, 91,
	184, 465, 466, 92, 467, 468, 0, 93, 189, 190,
	94, 433, 451, 469, 470, 193, 0, 461, 0, 444,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 322,
	100, 101, 0, 445, 447, 0, 446, 448, 102, 103,
	104, 105, 471, 106, 472, 473, 0, 0, 107, 0,
	0, 0, 464, 109, 0, 0, 0, 0, 417, 110,
	452, 431, 0, 111, 112, 474, 113, 0, 0, 0,
	0, 323, 0, 114, 462, 0, 202, 0, 115, 116,
	458, 460, 0, 0, 117, 0, 324, 118, 475, 476,
	477, 0, 443, 0, 325, 119, 326, 120, 121, 0,
	0, 463, 327, 122, 328, 0, 123, 0, 0, 124,
	0, 125, 126, 127, 128, 129, 329, 130, 131, 0,
	132, 407, 133, 432, 459, 134, 478, 135, 136, 0,
	0, 0, 0, 0, 137, 212, 330, 138, 331, 453,
	139, 140, 0, 454, 141, 215, 0, 142, 143, 144,
	479, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	332, 152, 153, 421, 154, 0, 238, 155, 156, 0,
	157, 158, 449, 159, 160, 333, 161, 480, 162, 0,
	163, 164, 166, 219, 165, 455, 0, 0, 167, 168,
	0, 221, 481, 0, 0, 169, 456, 457, 430, 170,
	171, 172, 173, 0, 0, 174, 175, 450, 0, 176,
	177, 178, 225, 482, 0, 179, 0, 0, 0, 0,
	180, 181, 182, 183, 408, 0, 436, 424, 425, 426,
	423, 412, 0, 0, 404, 405, 0, 0, 87, 88,
	406, 89, 0, 413, 1380, 0, 418, 0, 0, 0,
	90, 91, 184, 465, 466, 92, 467, 468, 0, 93,
	189, 190, 94, 433, 451, 469, 470, 193, 0, 461,
	0, 444, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 322, 100, 101, 0, 445, 447, 0, 446, 448,
	102, 103, 104, 105, 471, 106, 472, 473, 0, 0,
	107, 0, 0, 0, 464, 109, 0, 0, 0, 0,
	417, 110, 452, 431, 0, 111, 112, 474, 113, 0,
	0, 0, 0, 323, 0, 114, 462, 0, 202, 0,
	115, 116, 458, 460, 0, 0, 117, 0, 324, 118,
	475, 476, 477, 0, 443, 0, 325, 119, 326, 120,
	121, 0, 0, 463, 327, 122, 328, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 329, 130,
	131, 0, 132, 407, 133, 432, 459, 134, 478, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 330, 138,
	331, 453, 139, 140, 0, 454, 141, 215, 0, 142,
	143, 144, 479, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 332, 152, 153, 421, 154, 0, 238, 155,
	156, 0, 157, 158, 449, 159, 160, 333, 161, 480,
	162, 0, 163, 164, 166, 219, 165, 455, 0, 0,
	167, 168, 0, 221, 481, 0, 0, 169, 456, 457,
	430, 170, 171, 172, 173, 0, 0, 174, 175, 450,
	0, 176, 177, 178, 225, 482, 0, 179, 0, 0,
	0, 0, 180, 181, 182, 183, 408, 0, 436, 424,
	425, 426, 423, 412, 0, 0, 404, 405, 0, 0,
	87, 88, 406, 89, 0, 413, 1323, 0, 418, 0,
	0, 0, 90, 91, 184, 465, 466, 92, 467, 468,
	0, 93, 189, 190, 94, 433, 451, 469, 470, 193,
	0, 461, 0, 444, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 322, 100, 101, 0, 445, 447, 0,
	446, 448, 102, 103, 104, 105, 471, 106, 472, 473,
	0, 0, 107, 0, 0, 0, 464, 109, 0, 0,
	0, 0, 417, 110, 452, 431, 0, 111, 112, 474,
	113, 0, 0, 0, 0, 323, 0, 114, 462, 0,
	202, 0, 115, 116, 458, 460, 0, 0, 117, 0,
	324, 118, 475, 476, 477, 0, 443, 0, 325, 119,
	326, 120, 121, 0, 0, 463, 327, 122, 328, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 129,
	329, 130, 131, 0, 132, 407, 133, 432, 459, 134,
	478, 135, 136, 0, 0, 0, 0, 0, 137, 212,
	330, 138, 331, 453, 139, 140, 0, 454, 141, 215,
	0, 142, 143, 144, 479, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 332, 152, 153, 421, 154, 0,
	238, 155, 156, 0, 157, 158, 449, 159, 160, 333,
	161, 480, 162, 0, 163, 164, 166, 219, 165, 455,
	0, 0, 167, 168, 0, 221, 481, 0, 0, 169,
	456, 457, 430, 170, 171, 172, 173, 0, 0, 174,
	175, 450, 0, 176, 177, 178, 225, 482, 0, 179,
	0, 0, 0, 0, 180, 181, 182, 183, 408, 0,
	436, 424, 425, 426, 423, 412, 0, 0, 404, 405,
	0, 0, 87, 88, 406, 89, 0, 413, 984, 0,
	418, 0, 0, 0, 90, 91, 184, 465, 466, 92,
	467, 468, 0, 93, 189, 190, 94, 433, 451, 469,
	470, 193, 0, 461, 0, 444, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 322, 100, 101, 0, 445,
	447, 0, 446, 448, 102, 103, 104, 105, 471, 106,
	472, 473, 0, 0, 107, 0, 0, 0, 464, 109,
	0, 0, 0, 0, 417, 110, 452, 431, 0, 111,
	112, 474, 113, 0, 0, 0, 0, 323, 0, 114,
	462, 0, 202, 0, 115, 116, 458, 460, 0, 0,
	117, 0, 324, 118, 475, 476, 477, 0, 443, 0,
	325, 119, 326, 120, 121, 0, 0, 463, 327, 122,
	328, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 329, 130, 131, 0, 132, 407, 133, 432,
	459, 134, 478, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 330, 138, 331, 453, 139, 140, 0, 454,
	141, 215, 0, 142, 143, 144, 479, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 332, 152, 153, 421,
	154, 0, 238, 155, 156, 0, 157, 158, 449, 159,
	160, 333, 161, 480, 162, 0, 163, 164, 166, 219,
	165, 455, 0, 0, 167, 168, 0, 221, 481, 0,
	0, 169, 456, 457, 430, 170, 171, 172, 173, 0,
	0, 174, 175, 450, 0, 176, 177, 178, 225, 482,
	0, 179, 0, 0, 0, 0, 180, 181, 182, 183,
	408, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	404, 405, 0, 0, 0, 0, 406, 746, 980, 413,
	436, 424, 425, 426, 423, 412, 0, 0, 0, 0,
	0, 0, 87, 88, 0, 89, 0, 0, 0, 0,
	418, 0, 0, 0, 90, 91, 184, 465, 466, 92,
	467, 468, 0, 93, 189, 190, 94, 433, 451, 469,
	470, 193, 0, 461, 0, 444, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 322, 100, 101, 0, 445,
	447, 0, 446, 448, 102, 103, 104, 105, 471, 106,
	472, 473, 0, 0, 107, 0, 0, 0, 464, 109,
	0, 0, 0, 0, 417, 110, 452, 431, 0, 111,
	112, 474, 113, 0, 0, 0, 0, 323, 0, 114,
	462, 0, 202, 0, 115, 116, 458, 460, 0, 0,
	117, 0, 324, 118, 475, 476, 477, 0, 443, 0,
	325, 119, 326, 120, 121, 0, 0, 463, 327, 122,
	328, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 329, 130, 131, 0, 132, 407, 133, 432,
	459, 134, 478, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 330, 138, 331, 453, 139, 140, 0, 454,
	141, 215, 0, 142, 143, 144, 479, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 332, 152, 153, 421,
	154, 0, 238, 155, 156, 0, 157, 158, 449, 159,
	160, 333, 161, 480, 162, 0, 163, 164, 166, 219,
	165, 455, 0, 0, 167, 168, 0, 221, 481, 0,
	0, 169, 456, 457, 430, 170, 171, 172, 173, 0,
	0, 174, 175, 450, 0, 176, 177, 178, 225, 482,
	1329, 179, 0, 0, 0, 0, 180, 181, 182, 183,
	408, 0, 436, 424, 425, 426, 423, 412, 0, 0,
	404, 405, 0, 0, 87, 88, 406, 89, 0, 413,
	0, 0, 418, 0, 0, 0, 90, 91, 184, 465,
	466, 92, 467, 468, 0, 93, 189, 190, 94, 433,
	451, 469, 470, 193, 0, 461, 0, 444, 0, 95,
	96, 97, 0, 98, 0, 99, 0, 322, 100, 101,
	0, 445, 447, 0, 446, 448, 102, 103, 104, 105,
	471, 106, 472, 473, 503, 0, 107, 0, 0, 0,
	464, 109, 0, 0, 0, 0, 417, 110, 452, 431,
	0, 111, 112, 474, 113, 0, 0, 0, 0, 323,
	0, 114, 462, 0, 202, 0, 115, 116, 458, 460,
	0, 0, 117, 0, 324, 118, 475, 476, 477, 0,
	443, 0, 325, 119, 326, 120, 121, 0, 0, 463,
	327, 122, 328, 0, 123, 0, 0, 124, 0, 125,
	126, 127, 128, 129, 329, 130, 131, 0, 132, 407,
	133, 432, 459, 134, 478, 135, 136, 0, 0, 0,
	0, 0, 137, 212, 330, 138, 331, 453, 139, 140,
	0, 454, 141, 215, 0, 142, 143, 144, 479, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 332, 152,
	153, 421, 154, 0, 238, 155, 156, 0, 157, 158,
	449, 159, 160, 333, 161, 480, 162, 0, 163, 164,
	166, 219, 165, 455, 0, 0, 167, 168, 0, 221,
	481, 0, 0, 169, 456, 457, 430, 170, 171, 172,
	173, 0, 0, 174, 175, 450, 0, 176, 177, 178,
	225, 482, 0, 179, 0, 0, 0, 0, 180, 181,
	182, 183, 408, 0, 436, 424, 425, 426, 423, 412,
	0, 0, 404, 405, 0, 0, 87, 88, 406, 89,
	0, 413, 0, 0, 418, 0, 0, 0, 90, 91,
	184, 465, 466, 92, 467, 468, 0, 93, 189, 190,
	94, 433, 451, 469, 470, 193, 0, 461, 0, 444,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 322,
	100, 101, 0, 445, 447, 0, 446, 448, 102, 103,
	104, 105, 471, 106, 472, 473, 0, 0, 107, 0,
	0, 0, 464, 109, 0, 0, 0, 0, 417, 110,
	452, 431, 0, 111, 112, 474, 113, 0, 0, 0,
	0, 323, 0, 114, 462, 0, 202, 0, 115, 116,
	458, 460, 0, 0, 117, 0, 324, 118, 475, 476,
	477, 0, 443, 0, 325, 119, 326, 120, 121, 0,
	0, 463, 327, 122, 328, 0, 123, 0, 0, 124,
	0, 125, 126, 127, 128, 129, 329, 130, 131, 0,
	132, 407, 133, 432, 459, 134, 478, 135, 136, 0,
	0, 0, 0, 0, 137, 212, 330, 138, 331, 453,
	139, 140, 0, 454, 141, 215, 0, 142, 143, 144,
	479, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	332, 152, 153, 421, 154, 0, 238, 155, 156, 0,
	157, 158, 449, 159, 160, 333, 161, 480, 162, 0,
	163, 164, 166, 219, 165, 455, 0, 0, 167, 168,
	0, 221, 481, 0, 0, 169, 456, 457, 430, 170,
	171, 172, 173, 0, 0, 174, 175, 450, 0, 176,
	177, 178, 225, 482, 0, 179, 0, 0, 0, 0,
	180, 181, 182, 183, 408, 0, 436, 424, 425, 426,
	423, 412, 0, 0, 404, 405, 402, 0, 87, 88,
	406, 89, 0, 413, 0, 0, 418, 0, 0, 0,
	90, 91, 184, 465, 466, 92, 467, 468, 0, 93,
	189, 190, 94, 433, 451, 469, 470, 193, 0, 461,
	0, 444, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 322, 100, 101, 0, 445, 447, 0, 446, 448,
	102, 103, 104, 105, 471, 106, 472, 473, 0, 0,
	107, 0, 0, 0, 464, 109, 0, 0, 0, 0,
	417, 110, 452, 431, 0, 111, 112, 474, 113, 0,
	0, 0, 1038, 323, 0, 114, 462, 0, 202, 0,
	115, 116, 458, 460, 0, 0, 117, 0, 324, 118,
	475, 476, 477, 0, 443, 0, 325, 119, 326, 120,
	121, 0, 0, 463, 327, 122, 328, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 329, 130,
	131, 0, 132, 407, 133, 432, 459, 134, 478, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 330, 138,
	331, 453, 139, 140, 0, 454, 141, 215, 0, 142,
	143, 144, 479, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 332, 152, 153, 421, 154, 0, 238, 155,
	156, 0, 157, 158, 449, 159, 160, 333, 161, 480,
	162, 0, 163, 164, 166, 219, 165, 455, 0, 0,
	167, 168, 0, 221, 481, 0, 0, 169, 456, 457,
	430, 170, 171, 172, 173, 0, 0, 174, 175, 450,
	0, 176, 177, 178, 225, 482, 0, 179, 0, 0,
	0, 0, 180, 181, 182, 183, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 404, 405, 0, 0,
	0, 0, 406, 0, 0, 413, 436, 424, 425, 426,
	423, 412, 0, 0, 0, 0, 0, 0, 87, 88,
	687, 89, 0, 0, 0, 0, 418, 0, 0, 0,
	90, 91, 184, 465, 466, 92, 467, 468, 0, 93,
	189, 190, 94, 433, 451, 469, 470, 193, 0, 461,
	0, 444, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 322, 100, 101, 0, 445, 447, 0, 446, 448,
	102, 103, 104, 105, 471, 106, 472, 473, 0, 0,
	107, 0, 0, 0, 464, 109, 0, 0, 0, 0,
	417, 110, 452, 431, 0, 111, 112, 474, 113, 0,
	0, 0, 0, 323, 0, 114, 462, 0, 202, 0,
	115, 116, 458, 460, 0, 0, 117, 0, 324, 118,
	475, 476, 477, 0, 443, 0, 325, 119, 326, 120,
	121, 0, 0, 463, 327, 122, 328, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 329, 130,
	131, 0, 132, 407, 133, 432, 459, 134, 478, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 330, 138,
	331, 453, 139, 140, 0, 454, 141, 215, 0, 142,
	143, 144, 479, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 332, 152, 153, 421, 154, 0, 238, 155,
	156, 0, 157, 158, 449, 159, 160, 333, 161, 480,
	162, 0, 163, 164, 166, 219, 165, 455, 0, 0,
	167, 168, 0, 221, 481, 0, 0, 169, 456, 457,
	430, 170, 171, 172, 173, 0, 0, 174, 175, 450,
	0, 176, 177, 178, 225, 482, 0, 179, 0, 0,
	0, 0, 180, 181, 182, 183, 408, 0, 436, 424,
	425, 426, 423, 412, 0, 0, 404, 405, 0, 0,
	87, 88, 406, 89, 0, 413, 0, 0, 418, 0,
	0, 0, 90, 91, 184, 465, 466, 92, 467, 468,
	0, 93, 189, 190, 94, 433, 451, 469, 470, 193,
	0, 461, 0, 444, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 322, 100, 1655, 0, 445, 447, 0,
	446, 448, 102, 103, 104, 105, 471, 106, 472, 473,
	0, 0, 107, 0, 0, 0, 464, 109, 0, 0,
	0, 0, 417, 110, 452, 431, 0, 111, 112, 474,
	113, 0, 0, 0, 0, 323, 0, 114, 462, 0,
	202, 0, 115, 116, 458, 460, 0, 0, 117, 0,
	324, 118, 475, 476, 477, 0, 443, 0, 325, 119,
	326, 120, 121, 0, 0, 463, 327, 122, 328, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 129,
	329, 130, 131, 0, 132, 407, 133, 432, 459, 134,
	478, 135, 136, 0, 0, 0, 0, 0, 137, 212,
	330, 138, 331, 453, 139, 140, 0, 454, 141, 215,
	0, 142, 143, 144, 479, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 332, 152, 153, 421, 154, 0,
	238, 155, 156, 0, 157, 158, 449, 159, 160, 333,
	161, 480, 162, 0, 163, 164, 166, 219, 165, 455,
	0, 0, 167, 168, 0, 221, 481, 0, 0, 169,
	456, 457, 430, 170, 171, 1654, 173, 0, 0, 174,
	175, 450, 0, 176, 177, 178, 225, 482, 0, 179,
	0, 0, 0, 0, 180, 181, 182, 183, 408, 0,
	436, 424, 425, 426, 423, 412, 0, 0, 404, 405,
	0, 0, 87, 88, 406, 89, 0, 413, 0, 0,
	418, 0, 0, 0, 90, 91, 1653, 465, 466, 92,
	467, 468, 0, 93, 189, 190, 94, 433, 451, 469,
	470, 193, 0, 461, 0, 444, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 322, 100, 1655, 0, 445,
	447, 0, 446, 448, 102, 103, 104, 105, 471, 106,
	472, 473, 0, 0, 107, 0, 0, 0, 464, 109,
	0, 0, 0, 0, 417, 110, 452, 431, 0, 111,
	112, 474, 113, 0, 0, 0, 0, 323, 0, 114,
	462, 0, 202, 0, 115, 116, 458, 460, 0, 0,
	117, 0, 324, 118, 475, 476, 477, 0, 443, 0,
	325, 119, 326, 120, 121, 0, 0, 463, 327, 122,
	328, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 329, 130, 131, 0, 132, 407, 133, 432,
	459, 134, 478, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 330, 138, 331, 453, 139, 140, 0, 454,
	141, 215, 0, 142, 143, 144, 479, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 332, 152, 153, 421,
	154, 0, 238, 155, 156, 0, 157, 158, 449, 159,
	160, 333, 161, 480, 162, 0, 163, 164, 166, 219,
	165, 455, 0, 0, 167, 168, 0, 221, 481, 0,
	0, 169, 456, 457, 430, 170, 171, 1654, 173, 0,
	0, 174, 175, 450, 0, 176, 177, 178, 225, 482,
	0, 179, 0, 0, 0, 0, 180, 181, 182, 183,
	408, 0, 436, 424, 425, 426, 423, 412, 0, 0,
	404, 405, 0, 0, 87, 88, 406, 89, 0, 413,
	0, 0, 418, 0, 0, 0, 90, 91, 184, 465,
	466, 92, 467, 468, 0, 93, 189, 190, 94, 433,
	451, 469, 470, 193, 0, 461, 0, 444, 0, 95,
	96, 97, 0, 98, 0, 99, 0, 322, 100, 101,
	0, 445, 447, 0, 446, 448, 102, 103, 104, 105,
	471, 106, 472, 473, 0, 0, 107, 0, 0, 0,
	464, 109, 0, 0, 0, 0, 417, 110, 452, 431,
	0, 111, 112, 474, 113, 0, 0, 0, 0, 323,
	0, 114, 462, 0, 202, 0, 115, 116, 458, 460,
	0, 0, 117, 0, 324, 118, 475, 476, 477, 0,
	443, 0, 325, 119, 326, 120, 121, 0, 0, 463,
	327, 122, 328, 0, 123, 0, 0, 124, 0, 125,
	126, 127, 128, 129, 329, 130, 131, 0, 132, 407,
	133, 432, 459, 134, 478, 135, 136, 0, 0, 0,
	0, 0, 137, 212, 330, 138, 331, 453, 139, 140,
	0, 454, 141, 215, 0, 142, 143, 144, 479, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 332, 152,
	153, 421, 154, 0, 238, 155, 156, 0, 157, 158,
	449, 159, 160, 333, 161, 480, 162, 0, 163, 164,
	166, 219, 165, 455, 0, 0, 167, 168, 0, 221,
	481, 0, 0, 169, 456, 457, 430, 170, 171, 172,
	173, 0, 0, 174, 175, 450, 0, 176, 177, 178,
	225, 482, 0, 179, 0, 0, 0, 0, 180, 181,
	182, 183, 408, 0, 436, 424, 425, 426, 423, 412,
	0, 0, 404, 405, 0, 0, 87, 88, 406, 89,
	0, 413, 0, 0, 418, 0, 0, 0, 90, 91,
	184, 465, 466, 92, 467, 468, 0, 93, 189, 190,
	94, 433, 451, 469, 470, 193, 0, 461, 0, 444,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 322,
	100, 101, 0, 445, 447, 0, 446, 448, 102, 103,
	104, 105, 471, 106, 472, 473, 0, 0, 107, 0,
	0, 0, 464, 109, 0, 0, 0, 0, 417, 110,
	452, 431, 0, 111, 112, 474, 113, 0, 0, 0,
	0, 323, 0, 114, 462, 0, 202, 0, 115, 116,
	458, 460, 0, 0, 117, 0, 324, 118, 475, 476,
	477, 0, 443, 0, 325, 119, 326, 120, 121, 0,
	0, 463, 327, 122, 328, 0, 123, 0, 0, 124,
	0, 125, 126, 127, 128, 129, 329, 130, 131, 0,
	132, 0, 133, 432, 459, 134, 478, 135, 136, 0,
	0, 0, 0, 0, 137, 212, 330, 138, 331, 453,
	139, 140, 0, 454, 141, 215, 0, 142, 143, 144,
	479, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	332, 152, 153, 1028, 154, 0, 238, 155, 156, 0,
	157, 158, 449, 159, 160, 333, 161, 480, 162, 0,
	163, 164, 166, 219, 165, 455, 0, 0, 167, 168,
	0, 221, 481, 0, 0, 169, 456, 457, 430, 170,
	171, 172, 173, 0, 0, 174, 175, 450, 0, 176,
	177, 178, 225, 482, 0, 179, 0, 0, 0, 0,
	180, 181, 182, 183, 436, 424, 425, 426, 423, 412,
	0, 0, 0, 0, 1024, 1025, 87, 88, 0, 89,
	1026, 0, 0, 1027, 418, 0, 0, 0, 90, 91,
	0, 465, 466, 92, 467, 468, 0, 93, 189, 190,
	94, 433, 451, 469, 470, 193, 0, 461, 0, 444,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 322,
	100, 1655, 0, 445, 447, 0, 446, 448, 102, 103,
	104, 105, 471, 106, 472, 473, 0, 0, 107, 0,
	0, 0, 464, 109, 0, 0, 0, 0, 417, 110,
	452, 431, 0, 111, 112, 474, 113, 0, 0, 0,
	0, 323, 0, 114, 462, 0, 202, 0, 115, 116,
	458, 460, 0, 0, 117, 0, 324, 118, 475, 476,
	477, 0, 443, 0, 0, 119, 326, 120, 121, 0,
	0, 463, 327, 122, 0, 0, 123, 0, 0, 124,
	0, 125, 126, 127, 128, 129, 329, 130, 131, 0,
	132, 407, 133, 432, 459, 134, 478, 135, 136, 0,
	0, 0, 0, 0, 137, 212, 330, 138, 331, 453,
	139, 140, 0, 454, 141, 215, 0, 142, 143, 144,
	479, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	332, 152, 153, 421, 154, 0, 238, 155, 156, 0,
	157, 158, 449, 159, 160, 0, 161, 480, 162, 0,
	163, 164, 166, 219, 165, 455, 0, 0, 167, 168,
	0, 221, 481, 0, 0, 169, 456, 457, 430, 170,
	171, 1654, 173, 0, 0, 174, 175, 450, 0, 176,
	177, 178, 225, 482, 0, 179, 0, 0, 0, 0,
	180, 181, 182, 183, 436, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 404, 405, 87, 88, 0, 89,
	406, 0, 0, 413, 0, 0, 0, 0, 90, 91,
	184, 185, 186, 92, 187, 188, 0, 93, 189, 190,
	94, 0, 451, 191, 192, 193, 0, 461, 0, 444,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 322,
	100, 101, 0, 445, 447, 0, 446, 448, 102, 103,
	104, 105, 195, 106, 196, 197, 0, 0, 107, 0,
	0, 0, 108, 109, 0, 0, 0, 0, 198, 110,
	452, 0, 0, 111, 112, 200, 113, 0, 0, 0,
	0, 323, 0, 114, 462, 0, 202, 0, 115, 116,
	458, 460, 0, 0, 117, 0, 324, 118, 205, 206,
	207, 0, 208, 0, 325, 119, 326, 120, 121, 0,
	0, 463, 327, 122, 328, 0, 123, 0, 0, 124,
	0, 125, 126, 127, 128, 129, 329, 130, 131, 0,
	132, 0, 133, 0, 459, 134, 211, 135, 136, 0,
	0, 0, 0, 0, 137, 212, 330, 138, 331, 453,
	139, 140, 0, 454, 141, 215, 0, 142, 143, 144,
	216, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	332, 152, 153, 217, 154, 0, 238, 155, 156, 0,
	157, 158, 449, 159, 160, 333, 161, 218, 162, 0,
	163, 164, 166, 219, 165, 455, 0, 0, 167, 168,
	0, 221, 222, 0, 0, 169, 456, 457, 0, 170,
	171, 172, 173, 0, 0, 174, 175, 450, 0, 176,
	177, 178, 225, 226, 0, 179, 0, 0, 0, 0,
	180, 181, 182, 183, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 0, 89,
	0, 0, 0, 1439, 0, 0, 0, 0, 90, 91,
	184, 185, 186, 92, 187, 188, 0, 93, 189, 190,
	94, 0, 0, 191, 192, 193, 0, 194, 0, 321,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 322,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 195, 106, 196, 197, 0, 0, 107, 0,
	0, 0, 108, 109, 0, 0, 0, 0, 198, 110,
	199, 0, 0, 111, 112, 200, 113, 0, 0, 0,
	0, 323, 0, 114, 201, 0, 202, 0, 115, 116,
	203, 204, 0, 0, 117, 0, 324, 118, 205, 206,
	207, 0, 208, 0, 325, 119, 326, 120, 121, 0,
	0, 209, 327, 122, 328, 0, 123, 0, 0, 124,
	0, 125, 126, 127, 128, 129, 329, 130, 131, 0,
	132, 0, 133, 0, 210, 134, 211, 135, 136, 0,
	0, 0, 0, 0, 137, 212, 330, 138, 331, 213,
	139, 140, 0, 214, 141, 215, 0, 142, 143, 144,
	216, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	332, 152, 153, 217, 154, 0, 238, 155, 156, 49,
	157, 158, 0, 159, 160, 333, 161, 218, 162, 0,
	163, 164, 166, 219, 165, 220, 0, 51, 167, 168,
	0, 221, 222, 0, 0, 169, 223, 224, 0, 170,
	171, 172, 173, 0, 0, 174, 175, 0, 0, 176,
	177, 178, 320, 226, 0, 179, 0, 0, 0, 47,
	180, 181, 182, 183, 0, 48, 316, 559, 563, 0,
	564, 554, 0, 0, 0, 0, 0, 0, 87, 88,
	0, 89, 0, 46, 0, 0, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 321, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 322, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 567, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 556, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 323, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 324, 118,
	205, 206, 207, 0, 208, 0, 325, 119, 326, 120,
	121, 0, 0, 209, 327, 122, 328, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 329, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 557, 0, 0, 0, 137, 212, 330, 138,
	331, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 332, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 333, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	555, 170, 171, 172, 173, 0, 0, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 0, 0,
	0, 0, 180, 181, 182, 183, 316, 559, 563, 0,
	564, 554, 0, 0, 0, 0, 565, 560, 87, 88,
	0, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 321, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 322, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 550, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 556, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 323, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 324, 118,
	205, 206, 207, 0, 208, 0, 325, 119, 326, 120,
	121, 0, 0, 209, 327, 122, 328, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 329, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 557, 0, 0, 0, 137, 212, 330, 138,
	331, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 332, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 333, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	555, 170, 171, 172, 173, 0, 0, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 0, 0,
	0, 0, 180, 181, 182, 183, 316, 559, 563, 0,
	564, 554, 0, 0, 0, 0, 565, 560, 87, 88,
	0, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 321, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 322, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 556, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 323, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 324, 118,
	205, 206, 207, 0, 208, 0, 325, 119, 326, 120,
	121, 0, 0, 209, 327, 122, 328, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 329, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 557, 0, 0, 0, 137, 212, 330, 138,
	331, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 332, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 333, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	555, 170, 171, 172, 173, 0, 0, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 84, 179, 0, 0,
	0, 0, 180, 181, 182, 183, 0, 0, 87, 88,
	0, 89, 0, 0, 0, 0, 565, 560, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 49, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 51,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 0,
	0, 176, 177, 178, 320, 226, 0, 179, 0, 0,
	0, 47, 180, 181, 182, 183, 84, 48, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	0, 89, 0, 0, 0, 46, 0, 1134, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 0, 0,
	0, 0, 180, 181, 182, 183, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	0, 89, 0, 0, 0, 0, 393, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 290, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 0, 0,
	0, 0, 180, 181, 182, 183, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	0, 89, 0, 0, 0, 894, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 0, 0,
	0, 0, 180, 181, 182, 183, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	0, 89, 0, 0, 0, 831, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 0, 0,
	0, 0, 180, 181, 182, 183, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	0, 89, 0, 0, 0, 1347, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 0, 0,
	0, 0, 180, 181, 182, 183, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 88,
	0, 89, 0, 0, 0, 493, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 535, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 534,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 84, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 538, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 316, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 538, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 321, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 322, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 323, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 324, 118,
	205, 206, 207, 0, 208, 0, 325, 119, 326, 120,
	121, 0, 0, 209, 327, 122, 328, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 329, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 330, 138,
	331, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 332, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 333, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 84, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 805, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 803, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 808, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 872, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 807, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 873, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 84, 179, 0, 0,
	0, 0, 180, 181, 182, 183, 0, 0, 87, 88,
	0, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 805, 194,
	0, 0, 800, 95, 96, 97, 0, 98, 803, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 808, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 799, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 807, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 806, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 84, 179, 0, 0,
	0, 0, 180, 181, 182, 183, 0, 0, 87, 88,
	0, 89, 0, 0, 0, 0, 0, 1134, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 84, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 290, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 84, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 296, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 290, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 84, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 84, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 1072, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 84, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 1070, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 84, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 1061, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 84, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 679, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 84, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 82, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 84, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 521, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 0, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 84, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 378, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 84, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 375, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 84, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 339, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 235, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 234, 222, 0, 0, 230, 223, 224,
	0, 170, 171, 172, 173, 0, 84, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 235, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 234, 222, 0, 0, 230, 223, 224,
	0, 170, 171, 172, 173, 0, 84, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 311, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 84, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 308, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 84, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 306, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 84, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 299, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 84, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 279, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 84, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 228, 0,
	0, 124, 0, 125, 126, 127, 128, 235, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 0, 157, 229, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 234, 222, 0, 0, 230, 223, 224,
	0, 170, 171, 172, 173, 0, 84, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 0, 179, 87, 88,
	0, 89, 180, 181, 182, 183, 0, 0, 0, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 0, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 0, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 0, 0, 214, 141, 215, 0, 142,
	0, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 0, 0, 238, 155,
	156, 0, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 0,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 0,
	0, 176, 177, 178, 225, 226, 703, 179, 721, 722,
	723, 0, 180, 181, 182, 183, 0, 0, 724, 0,
	0, 0, 0, 0, 705, 703, 730, 721, 722, 723,
	0, 0, 0, 0, 0, 0, 0, 724, 0, 0,
	0, 0, 0, 705, 704, 730, 0, 0, 0, 0,
	718, 0, 703, 0, 721, 722, 723, 0, 0, 0,
	0, 0, 0, 704, 724, 0, 0, 0, 0, 718,
	705, 0, 730, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	704, 0, 0, 0, 0, 0, 718, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 731, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	729, 0, 0, 0, 0, 0, 0, 731, 0, 0,
	726, 0, 0, 0, 0, 0, 719, 0, 0, 729,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 726,
	0, 0, 0, 0, 731, 719, 0, 0, 725, 0,
	0, 0, 0, 0, 0, 0, 729, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 726, 725, 0, 0,
	0, 0, 719, 0, 0, 0, 0, 0, 0, 0,
	0, 720, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 728, 0, 0, 725, 0, 0, 0, 0, 0,
	720, 703, 0, 721, 722, 723, 0, 0, 0, 0,
	728, 0, 0, 724, 0, 0, 0, 0, 0, 705,
	0, 730, 0, 0, 0, 0, 0, 720, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 728, 0, 704,
	727, 0, 715, 716, 717, 718, 714, 711, 712, 713,
	706, 707, 708, 709, 710, 0, 0, 0, 0, 727,
	1611, 715, 716, 717, 0, 714, 711, 712, 713, 706,
	707, 708, 709, 710, 0, 0, 0, 0, 1198, 1594,
	1214, 1215, 1216, 0, 0, 0, 727, 0, 715, 716,
	717, 0, 714, 711, 712, 713, 706, 707, 708, 709,
	710, 0, 0, 731, 0, 0, 1573, 0, 703, 0,
	721, 722, 723, 0, 0, 729, 0, 0, 0, 0,
	724, 0, 1211, 0, 0, 726, 705, 0, 730, 0,
	0, 719, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 704, 0, 0, 0,
	0, 0, 718, 725, 0, 0, 0, 0, 0, 0,
	0, 0, 703, 0, 721, 722, 723, 0, 0, 0,
	0, 0, 0, 0, 724, 0, 0, 0, 0, 0,
	705, 0, 730, 0, 0, 703, 720, 721, 722, 723,
	0, 0, 1217, 0, 0, 0, 728, 724, 0, 0,
	704, 0, 0, 705, 0, 730, 718, 0, 1212, 0,
	731, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 729, 704, 0, 0, 0, 0, 0, 718,
	0, 0, 726, 0, 0, 0, 0, 0, 719, 0,
	0, 0, 0, 0, 0, 727, 0, 715, 716, 717,
	0, 714, 711, 712, 713, 706, 707, 708, 709, 710,
	725, 0, 0, 1213, 731, 1568, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 729, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 726, 731, 0, 0,
	0, 0, 719, 720, 0, 0, 0, 0, 0, 729,
	0, 0, 0, 728, 0, 0, 0, 0, 0, 726,
	0, 0, 0, 0, 725, 719, 0, 0, 0, 0,
	0, 0, 0, 0, 1208, 1209, 1210, 0, 1207, 1204,
	1205, 1206, 1199, 1200, 1201, 1202, 1203, 725, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 720, 0, 0,
	0, 0, 727, 0, 715, 716, 717, 728, 714, 711,
	712, 713, 706, 707, 708, 709, 710, 0, 0, 0,
	720, 0, 1564, 0, 0, 0, 0, 0, 0, 0,
	728, 0, 0, 703, 0, 721, 722, 723, 0, 0,
	0, 0, 0, 0, 0, 724, 0, 0, 0, 0,
	0, 705, 0, 730, 0, 0, 727, 0, 715, 716,
	717, 0, 714, 711, 712, 713, 706, 707, 708, 709,
	710, 704, 0, 0, 0, 0, 1503, 718, 0, 727,
	0, 715, 716, 717, 0, 714, 711, 712, 713, 706,
	707, 708, 709, 710, 0, 0, 0, 0, 0, 1502,
	0, 0, 0, 0, 0, 0, 0, 703, 0, 721,
	722, 723, 0, 0, 0, 0, 0, 0, 0, 724,
	0, 0, 0, 0, 0, 705, 0, 730, 0, 0,
	703, 0, 721, 722, 723, 731, 0, 0, 0, 0,
	0, 0, 724, 0, 0, 704, 0, 729, 705, 0,
	730, 718, 0, 0, 0, 0, 0, 726, 0, 0,
	0, 0, 0, 719, 0, 0, 0, 0, 704, 0,
	0, 0, 0, 0, 718, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 725, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 703, 0, 721, 722, 723, 731,
	0, 0, 0, 0, 0, 0, 724, 0, 720, 0,
	0, 729, 705, 0, 730, 0, 0, 0, 728, 0,
	0, 726, 731, 0, 0, 0, 0, 719, 0, 0,
	0, 0, 704, 0, 729, 0, 0, 0, 718, 0,
	0, 0, 0, 0, 726, 0, 0, 0, 0, 725,
	719, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 727, 0, 715,
	716, 717, 725, 714, 711, 712, 713, 706, 707, 708,
	709, 710, 720, 0, 0, 0, 0, 1412, 0, 0,
	0, 703, 728, 721, 722, 723, 731, 0, 0, 0,
	0, 0, 0, 724, 0, 720, 0, 0, 729, 705,
	0, 730, 0, 0, 0, 728, 0, 0, 726, 0,
	0, 0, 0, 0, 719, 0, 0, 0, 0, 704,
	0, 0, 0, 0, 0, 718, 0, 0, 0, 0,
	0, 727, 0, 715, 716, 717, 725, 714, 711, 712,
	713, 706, 707, 708, 709, 710, 0, 0, 0, 0,
	0, 1350, 0, 0, 727, 0, 715, 716, 717, 0,
	714, 711, 712, 713, 706, 707, 708, 709, 710, 720,
	0, 0, 0, 0, 1325, 0, 0, 0, 703, 728,
	721, 722, 723, 731, 0, 0, 0, 0, 0, 0,
	724, 0, 0, 0, 0, 729, 705, 0, 730, 0,
	0, 0, 0, 0, 0, 726, 0, 0, 0, 0,
	0, 719, 0, 0, 0, 0, 704, 0, 0, 0,
	0, 0, 718, 0, 0, 0, 0, 0, 727, 0,
	715, 716, 717, 725, 714, 711, 712, 713, 706, 707,
	708, 709, 710, 0, 0, 0, 0, 0, 976, 0,
	0, 0, 0, 0, 0, 0, 0, 703, 0, 721,
	722, 723, 0, 0, 1672, 0, 720, 0, 0, 724,
	0, 0, 0, 0, 0, 705, 728, 730, 0, 0,
	731, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 729, 0, 0, 704, 0, 0, 0, 0,
	0, 718, 726, 0, 0, 0, 0, 0, 719, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 727, 0, 715, 716, 717,
	725, 714, 711, 712, 713, 706, 707, 708, 709, 710,
	0, 0, 1671, 1396, 1228, 0, 703, 1227, 721, 722,
	723, 0, 0, 0, 0, 0, 0, 0, 724, 731,
	0, 0, 883, 720, 705, 0, 730, 0, 0, 0,
	733, 729, 0, 728, 0, 0, 703, 0, 721, 722,
	723, 726, 0, 0, 704, 0, 0, 719, 724, 0,
	718, 732, 0, 0, 705, 0, 730, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 725,
	0, 0, 0, 0, 704, 884, 0, 0, 0, 0,
	718, 0, 727, 0, 715, 716, 717, 0, 714, 711,
	712, 713, 706, 707, 708, 709, 710, 0, 0, 0,
	0, 0, 720, 0, 0, 0, 0, 0, 731, 0,
	0, 0, 728, 703, 0, 721, 722, 723, 0, 0,
	729, 0, 0, 0, 0, 724, 0, 0, 0, 0,
	726, 705, 0, 730, 0, 0, 719, 0, 731, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	729, 704, 0, 0, 0, 0, 0, 718, 725, 0,
	726, 727, 0, 715, 716, 717, 719, 714, 711, 712,
	713, 706, 707, 708, 709, 710, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 725, 0,
	0, 720, 0, 0, 0, 0, 0, 0, 0, 0,
	703, 728, 721, 722, 723, 0, 0, 0, 0, 0,
	0, 0, 724, 0, 0, 731, 0, 0, 705, 0,
	730, 720, 0, 0, 0, 0, 0, 729, 0, 0,
	0, 728, 0, 0, 0, 0, 0, 726, 704, 0,
	0, 0, 0, 719, 718, 0, 0, 0, 0, 0,
	727, 0, 715, 716, 717, 0, 714, 711, 712, 713,
	706, 707, 708, 709, 710, 725, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	727, 0, 715, 716, 717, 0, 714, 711, 712, 713,
	706, 707, 708, 709, 710, 0, 0, 703, 720, 721,
	722, 723, 731, 0, 0, 0, 0, 0, 728, 724,
	0, 0, 0, 0, 729, 705, 0, 730, 0, 0,
	0, 0, 0, 0, 726, 0, 0, 0, 0, 0,
	719, 0, 0, 0, 0, 704, 0, 0, 0, 0,
	0, 718, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 725, 0, 0, 0, 0, 727, 0, 715,
	716, 717, 0, 714, 711, 712, 713, 706, 707, 708,
	709, 710, 0, 0, 703, 0, 721, 722, 723, 0,
	0, 0, 0, 0, 0, 720, 724, 1234, 0, 1229,
	0, 0, 705, 0, 730, 728, 0, 0, 0, 731,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 729, 704, 0, 0, 0, 0, 0, 718, 0,
	0, 726, 0, 0, 0, 0, 0, 719, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 727, 0, 715, 716, 717, 725,
	714, 711, 712, 713, 706, 707, 708, 709, 710, 0,
	0, 703, 0, 721, 722, 723, 0, 0, 0, 0,
	0, 0, 0, 724, 0, 0, 731, 0, 0, 705,
	0, 730, 720, 0, 0, 0, 0, 0, 729, 0,
	0, 0, 728, 0, 0, 0, 0, 0, 726, 704,
	0, 0, 0, 0, 719, 718, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 725, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 727, 0, 715, 716, 717, 0, 714, 711, 712,
	713, 706, 707, 708, 709, 710, 0, 0, 703, 720,
	721, 722, 723, 731, 0, 0, 0, 0, 0, 728,
	724, 0, 0, 1191, 0, 729, 705, 0, 730, 0,
	0, 0, 0, 0, 0, 726, 0, 0, 0, 0,
	0, 719, 0, 0, 0, 0, 704, 0, 0, 0,
	0, 0, 718, 0, 0, 0, 0, 0, 0, 21,
	0, 0, 0, 725, 0, 0, 0, 0, 727, 35,
	715, 716, 717, 1196, 714, 711, 712, 713, 706, 707,
	708, 709, 710, 703, 0, 721, 722, 723, 0, 0,
	0, 0, 37, 0, 0, 724, 720, 0, 42, 0,
	0, 705, 0, 730, 0, 0, 728, 0, 0, 0,
	731, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 704, 729, 26, 0, 38, 0, 718, 0, 27,
	0, 0, 726, 0, 0, 0, 0, 0, 719, 0,
	0, 0, 28, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 727, 0, 715, 716, 717,
	725, 714, 711, 712, 713, 706, 707, 708, 709, 710,
	703, 0, 721, 722, 723, 0, 0, 0, 0, 0,
	0, 0, 724, 0, 0, 731, 0, 0, 705, 0,
	730, 0, 0, 720, 0, 0, 0, 729, 0, 0,
	0, 0, 703, 728, 721, 722, 723, 726, 704, 0,
	0, 0, 0, 719, 718, 0, 0, 0, 0, 0,
	705, 0, 730, 0, 0, 0, 40, 0, 0, 29,
	1198, 39, 1214, 1215, 1216, 725, 30, 0, 0, 49,
	704, 0, 1320, 33, 34, 0, 718, 0, 0, 0,
	0, 36, 727, 0, 715, 716, 717, 51, 714, 711,
	712, 713, 706, 707, 708, 709, 710, 0, 720, 41,
	0, 0, 731, 0, 1211, 0, 0, 0, 728, 0,
	0, 0, 52, 0, 729, 0, 0, 0, 0, 47,
	0, 0, 0, 0, 726, 48, 0, 0, 0, 0,
	719, 0, 0, 0, 731, 703, 0, 721, 722, 723,
	0, 0, 0, 46, 0, 0, 729, 0, 0, 0,
	0, 0, 0, 705, 0, 730, 726, 727, 0, 715,
	716, 717, 719, 714, 711, 712, 713, 706, 707, 708,
	709, 710, 0, 704, 1217, 0, 0, 0, 0, 718,
	0, 0, 0, 0, 0, 720, 0, 0, 0, 1198,
	1212, 1214, 1215, 1216, 0, 728, 0, 0, 0, 0,
	0, 1319, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 720, 0, 1198,
	0, 1214, 1215, 1216, 0, 0, 0, 728, 0, 0,
	0, 0, 0, 1211, 0, 0, 0, 731, 0, 0,
	0, 0, 0, 0, 727, 1213, 715, 716, 717, 0,
	714, 711, 712, 713, 706, 707, 708, 709, 710, 726,
	0, 0, 0, 1211, 0, 719, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 727, 0, 715, 716,
	717, 0, 714, 711, 712, 713, 706, 707, 708, 709,
	710, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1217, 0, 0, 1208, 1209, 1210, 0,
	1207, 1204, 1205, 1206, 1199, 1200, 1201, 1202, 1203, 1212,
	720, 1218, 0, 0, 0, 0, 0, 0, 0, 0,
	728, 0, 0, 1217, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 912, 927, 903, 920, 919, 0,
	0, 905, 904, 0, 1213, 0, 929, 928, 0, 727,
	0, 715, 716, 717, 0, 714, 711, 712, 713, 706,
	707, 708, 709, 710, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1213, 925, 0, 917, 916, 0,
	0, 0, 0, 0, 0, 915, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 914, 0,
	0, 0, 0, 0, 0, 1208, 1209, 1210, 0, 1207,
	1204, 1205, 1206, 1199, 1200, 1201, 1202, 1203, 0, 0,
	0, 908, 909, 910, 0, 576, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1208, 1209, 1210, 0, 1207,
	1204, 1205, 1206, 1199, 1200, 1201, 1202, 1203, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 918,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 913, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	911, 0, 0, 0, 0, 0, 907, 0, 0, 0,
	0, 0, 906, 0, 0, 926, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 930,
}
var sqlPact = [...]int{

	19090, -1000, -8, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 732, -1000, -1000, -1000, 588, 692, 41, 991, 991,
	14382, -1000, -1000, 16912, 1639, 311, 325, 311, 311, 322,
	14382, 383, 467, 70, -1000, 837, -10, 16682, 13232, 1134,
	-12, 12772, 215, 19090, 13002, 13232, 16452, 973, 873, 12772,
	16222, 15992, 15762, -1000, 8880, -1000, -1000, -1000, -1000, 720,
	-1000, -13, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	719, -1000, 13232, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15532, 15302,
	688, -1000, -1000, 439, 259, 1127, -1000, -2, -1000, -1000,
	-1000, 972, -1000, 708, 967, 966, 964, 963, 258, 734,
	-1000, 688, -1000, 688, -1000, -1000, -1000, 375, 14382, -1000,
	12772, -1000, 15072, 886, 14842, -1000, 837, -1000, -1000, -1000,
	741, 1116, 1116, 1116, 1154, 77, 76, 70, -21, 13232,
	-1000, 216, -21, 6600, 6600, -1000, -1000, 215, -1000, 237,
	11122, -4, -1000, 6348, -1000, 784, 1027, 518, 515, 1021,
	-80, 12772, 13232, 433, 14612, -1000, 1019, 93, 1017, -1000,
	-28, 1015, -1000, -39, -1000, -1000, -1000, -1000, -1000, -1000,
	215, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11372, 1174, 11372, -1000, -1000, 1186,
	-1000, -1000, -15, -16, 823, 944, 9382, 9132, 1064, 940,
	-1000, -1000, -1000, -3, 3812, 13232, 982, 11372, 13232, 13232,
	13232, -1000, 13232, -1000, 819, -1000, -1000, -17, -18, -1000,
	14382, -1000, 95, -1000, 212, 790, 14152, -1000, 788, -1000,
	741, -1000, 722, 812, 7122, 7878, 70, -1000, -1000, 70,
	70, 7878, -1000, -1000, 13232, -21, 1184, 13232, 960, -67,
	-1000, 18526, -1000, -1000, 7878, 7878, 7878, 7878, 7878, 641,
	-1000, -1000, -1000, 4566, -1000, -1000, -4, 211, 219, -1000,
	-1000, 209, -4, -1000, -1000, -1000, -1000, 208, 1259, 341,
	-1000, -1000, -1000, 7878, 264, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 981, 199, 198, -1000, -1000, -1000,
	-1000, 197, 194, 193, 192, 190, 189, 187, 180, 169,
	165, 162, 160, 159, 571, -1000, 278, -1000, -1000, 278,
	278, -1000, 146, 146, 147, -1000, -1000, -1000, 146, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 158, 92,
	-1000, -1000, -1000, 13232, -4, -1000, -1000, -1000, 7878, 3561,
	-44, -1000, 19123, -1000, -41, 614, -1000, 12302, 1111, 1108,
	1083, 12772, 372, 370, 13232, 13232, 270, 49, 1177, 10622,
	-1000, 13232, 13232, -1000, 13232, -1000, -1000, 13232, 13232, 13232,
	-10, 11832, 369, -30, 11602, 13232, -1000, -5, -1000, -1000,
	958, 310, 529, 861, 669, -1000, -1000, -1000, -1000, -24,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1225, -1000, -1000, -1000, -1000, 1247, -24, -1000, -1000, -1000,
	-1000, -1000, 1254, -1000, -1000, -1000, -1000, 3812, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 13232, -1000, -1000, -1000, -1000, -1000,
	-1000, 529, 861, -1000, -1000, 12772, 12062, 1014, 706, 783,
	-1000, 1012, -1000, -1000, -1000, -1000, 19123, -1000, 19123, 482,
	876, -1000, 876, -25, -1000, 18496, -1000, 156, -49, -1000,
	270, 10372, 6600, 19553, 13232, 378, 7878, 7878, 7878, 7878,
	7878, 7878, 7878, 7878, 7878, 7878, 7878, 7878, 7878, 7878,
	7878, 7878, 7878, 7878, 7878, 7878, 7878, 820, 367, 516,
	590, 145, 3812, -1000, 1210, 1210, 1210, 19242, 19242, 153,
	-20, 18134, -27, -4, -1000, -1000, 5826, 5574, -4, 4062,
	-1000, 731, 1245, 275, 19123, 987, 925, 155, 68, 66,
	7878, 908, 7878, 8130, 7878, 7878, 4818, 7878, 7878, 7878,
	7878, 7878, 7878, -1000, 154, -1000, -1000, -1000, -1000, 1243,
	-1000, -1000, 1242, -1000, 1241, 270, 65, -1000, 183, -1000,
	-1000, 6348, -1000, 570, 13232, 13232, 13232, -1000, -1000, 779,
	13922, -1000, 19553, 13232, -1000, 150, 148, 848, 833, 13232,
	13232, 13692, 13462, 13232, 713, 13232, 13232, 501, -1000, 469,
	7878, 700, -1000, 9872, 283, 13232, 67, -1000, -1000, -1000,
	251, 13232, -1000, -1000, -1000, 93, -1000, -28, -1000, -1000,
	13232, 11602, -30, -31, -1000, -1000, 13232, 861, -1000, -1000,
	-1000, 511, -1000, 549, -1000, 9632, -1000, -1000, -1000, 731,
	-1000, -51, -1000, -1000, -1000, -1000, 63, -33, -1000, -1000,
	-1000, -1000, 13232, 202, 13232, 13232, 1011, 13232, -1000, -1000,
	-1000, 7878, -1000, -1000, -1000, -10, 13232, -1000, 924, -36,
	1383, -88, 12542, -1000, 3008, -1000, -1000, 1191, -1000, -1000,
	-1000, -1000, 59, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 147, 571, 146, 146, 146, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 278, 278, 278,
	-1000, -1000, 257, 576, 576, 1158, 1158, 1158, 1577, 1577,
	1670, 1879, 2348, 2348, 2348, 426, 374, 374, 2348, 2348,
	2348, 19242, 19210, 624, 7878, 365, 574, 145, 7878, -1000,
	902, -1000, -1000, -1000, 957, 144, 8130, 8130, -1000, -1000,
	-1000, 4566, -1000, -1000, 143, 7878, -1000, 7878, -50, -78,
	-1000, 19123, -1000, -54, -1000, -1000, -35, 7878, 7878, 7878,
	62, -1000, 356, -1000, 355, 353, 352, -1000, 140, 61,
	450, -1000, 7878, 644, 138, 131, 7878, -1000, -1000, 19048,
	56, 956, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 55,
	18951, 54, 19429, -1000, 8130, 8130, 8130, 4566, 130, 53,
	18407, -73, 18864, 6852, 6852, 6852, 52, 18787, 7878, -73,
	2647, 2377, 2329, -56, -58, -62, 1236, -68, 51, 50,
	924, -1000, -1000, 7878, -1000, -1000, -1000, 348, 339, 1010,
	-1000, 743, -1000, 685, 7878, 13232, 128, 127, 582, -1000,
	1003, 664, 999, 664, -1000, -41, 527, -1000, -1000, 335,
	-1000, 6600, 19123, 469, 1095, -74, -1000, -1000, -1000, 270,
	10622, 6348, -86, -1000, -51, -1000, -51, -1000, -1000, -1000,
	-1000, -1000, -1000, 13232, -1000, 12062, 126, 13232, 125, 123,
	13232, -1000, -1000, 46, -1000, -1000, -1000, -1000, -1000, 916,
	1152, 10372, 859, 858, 10372, 878, 651, 651, 651, -1000,
	12542, 3297, -1000, -1000, 13232, 122, 10122, 44, 1383, 227,
	222, -1000, 1234, 7878, 624, 7878, 8130, 8130, -1000, 624,
	-1000, -1000, -1000, -1000, 953, 121, 7878, 19553, 19399, 19270,
	-90, 5322, -53, 18060, 7878, -1000, -1000, 219, -1000, 42,
	6096, -1000, 18603, -34, -34, -1000, 785, 828, 476, 448,
	1228, 1253, 1035, -1000, 7878, 18690, -1000, 10872, 273, 655,
	18037, 19553, -1000, 7878, -1000, 948, 7878, -1000, 19553, 8130,
	8130, 8130, 8130, 8130, 8130, 8130, 8130, 8130, 8130, 8130,
	8130, 8130, 8130, 8130, 8130, 8130, 8130, 870, 8130, 1209,
	1209, 1209, -63, 5070, -1000, 980, 948, 7878, 7878, 19553,
	39, 36, 35, -1000, 7878, -73, 7878, 7878, 7878, -1000,
	-1000, -1000, 31, -1000, 1226, -1000, -1000, 916, 18231, 13232,
	13232, 13232, 993, 1216, -1000, 17963, -91, 13232, 13232, -1000,
	867, 939, 301, 13232, -1000, 13232, -1000, 13232, 13232, 13232,
	13232, -67, -1000, 142, -10, 13232, 469, -1000, -1000, 249,
	-1000, -1000, 8630, 118, 12062, 8630, 693, -1000, 267, 7878,
	7878, 1383, 10372, 10372, 1142, 838, 10372, -1000, -1000, -1000,
	-1000, -1000, -1000, 897, 108, 13232, 12542, 379, 1218, 27,
	1160, 624, 2566, 2153, 7878, 19553, 19345, -92, -1000, 7878,
	7878, -1000, -96, -1000, 7878, -1000, 19123, -1000, 1219, 7878,
	25, 23, 19, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	15, -1000, -1000, 19123, 7878, -1000, -1000, 17142, 7878, 14,
	-1000, 12, 19123, 980, 19123, -1000, 514, 514, 1209, 1209,
	1209, 639, 639, 415, 1257, 473, 473, 473, 777, 490,
	490, 473, 473, 473, 947, 816, 107, 17658, 7878, -97,
	-1000, -1000, -1000, 19123, 19123, 7, -1000, -1000, -1000, -73,
	2038, 17765, 17742, -1000, 4, 267, -1000, -1000, -1000, -1000,
	13232, -1000, 13232, -1000, 13232, 772, -1000, -1000, 830, 106,
	8130, 13232, -1000, 593, -101, -103, 760, -1000, 746, 7878,
	-1000, 19553, 664, 664, -1000, 334, 333, -1000, 1040, 8630,
	1080, -1000, -1000, -1000, 104, -105, -1000, 186, 1118, 7878,
	-1000, -1000, 103, 8630, 3, -111, 13232, -1000, 13232, 19123,
	-73, -1000, 1142, -1000, 100, 7878, 10372, -1000, -153, -1000,
	246, -1000, -1000, -1000, 13232, -113, -1000, -1000, 184, 96,
	-1000, 7878, 7878, 19345, -122, -1000, 19553, 624, 624, -1000,
	17688, -1000, 18603, -1000, -1000, -1000, -1000, 19123, 589, -1000,
	17581, -1000, -1000, -1000, 8130, 931, 91, 19553, 17422, -1000,
	-1000, 7878, -1000, -1000, -1000, -1000, -1000, 1217, -1000, -1000,
	-1000, 7878, 17658, 80, -1000, 86, -1000, -1000, -1000, 517,
	-1000, -1000, 19123, 1135, -1000, -1000, 13232, 13232, 408, -123,
	13232, -1000, -1000, 4314, 593, 8630, 1102, -4, 13232, 1102,
	17395, 4062, -124, -1000, 593, 85, -69, -1000, 1167, -1000,
	13232, 19123, -1000, 897, -1000, 3812, -128, -1000, -1000, -1000,
	624, 624, -1000, -1000, -1000, 2, 655, 1145, -1000, 1772,
	8130, 19553, -130, -1000, 17376, -1000, 2735, 797, 13232, 13232,
	13232, 288, 13232, -1000, -1000, 406, -1000, 270, -1000, -1000,
	-1000, -1000, -1000, -1000, 1118, -35, 593, -1000, 8630, 13232,
	81, -132, -1000, -1000, -1000, -1000, 605, 7878, 1772, -134,
	-1000, -1000, -1000, 678, 725, -136, -138, 80, -1000, 7878,
	-1000, 10622, -1000, 1102, 1, -1000, -140, -1000, -1000, -1000,
	0, 7626, 7626, -73, -1000, -1000, 681, 679, 506, -1000,
	-1000, -1000, -1000, -1000, 797, 19123, -121, -1000, -1000, 593,
	-1000, -1000, -1000, 8380, 682, 461, 18328, -1000, -1000, 1044,
	-1000, 292, 787, 787, 678, -1000, -1000, 1194, -1000, -1000,
	-1000, -1000, -1000, -1000, 1202, -1000, -1000, 860, -1000, -1000,
	7374, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1507, 1506, 1163, 1505, 1503, 1501, 1500, 1498, 85,
	1493, 1492, 101, 1487, 81, 1485, 1478, 1476, 1470, 54,
	1469, 1464, 1461, 1460, 1454, 80, 36, 115, 1849, 104,
	1453, 1449, 1446, 23, 89, 86, 1439, 57, 75, 102,
	1434, 45, 1438, 116, 18, 24, 486, 74, 1436, 118,
	97, 1430, 1427, 1424, 34, 1423, 1419, 1418, 10, 41,
	25, 1417, 14, 79, 1415, 1414, 83, 1413, 76, 94,
	40, 100, 99, 1412, 53, 1407, 9, 52, 1405, 29,
	1403, 31, 68, 111, 1402, 56, 279, 51, 26, 58,
	1401, 1398, 1396, 1395, 50, 66, 43, 1394, 1389, 72,
	1386, 112, 114, 1383, 1382, 1378, 1377, 1376, 1374, 568,
	1372, 1365, 518, 3, 32, 48, 28, 93, 88, 27,
	1364, 20, 1363, 0, 793, 773, 1361, 39, 30, 61,
	38, 44, 12, 1360, 91, 1359, 1358, 1356, 1355, 1354,
	60, 1353, 63, 119, 35, 46, 69, 21, 47, 67,
	110, 122, 92, 1352, 96, 1351, 49, 1348, 1347, 863,
	70, 1346, 1343, 1339, 857, 623, 229, 158, 1336, 1335,
	217, 55, 1331, 1326, 62, 1324, 1322, 120, 1317, 117,
	16, 1314, 95, 1313, 71, 1312, 300, 42, 19, 1309,
	98, 59, 1308, 1307, 1306, 22, 2, 8, 5, 6,
	4, 13, 11, 1305, 1303, 106, 77, 1298, 130, 1295,
	1289, 33, 1287, 1283, 15, 1282, 17, 1280, 7, 1,
	1278, 121, 1277, 73, 1275, 1210, 1273, 123, 1271, 1270,
	1207, 1269, 1224, 65,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 31, 31, 37, 37, 37, 36, 36, 32, 32,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	71, 71, 70, 70, 73, 73, 11, 11, 12, 12,
	12, 12, 155, 155, 154, 13, 18, 221, 221, 221,
	225, 225, 226, 226, 227, 227, 227, 227, 227, 227,
	227, 223, 223, 21, 21, 21, 21, 109, 109, 111,
	111, 111, 111, 39, 108, 108, 108, 108, 110, 110,
	110, 110, 179, 177, 177, 184, 184, 184, 51, 51,
	51, 51, 51, 52, 52, 52, 176, 176, 176, 176,
	185, 185, 185, 185, 185, 185, 53, 53, 53, 183,
	183, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 178, 178, 222, 222, 224, 224,
	8, 8, 54, 54, 55, 55, 115, 115, 115, 114,
	193, 193, 194, 194, 194, 195, 195, 195, 195, 195,
	195, 195, 192, 192, 190, 190, 191, 191, 191, 191,
	228, 228, 113, 113, 58, 58, 198, 198, 198, 198,
	196, 196, 196, 196, 196, 199, 197, 200, 200, 200,
	200, 200, 143, 143, 143, 24, 7, 7, 98, 98,
	62, 62, 147, 147, 147, 45, 45, 33, 33, 33,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 99,
	99, 100, 100, 16, 20, 23, 23, 23, 23, 23,
	230, 230, 42, 42, 42, 42, 43, 43, 112, 112,
	112, 112, 112, 38, 6, 6, 14, 48, 48, 105,
	105, 105, 107, 107, 107, 106, 106, 106, 85, 85,
	25, 76, 76, 77, 77, 153, 78, 78, 19, 19,
	28, 28, 26, 26, 26, 26, 26, 26, 27, 27,
	29, 29, 29, 29, 29, 29, 29, 206, 206, 206,
	208, 208, 205, 15, 15, 15, 15, 207, 207, 229,
	229, 86, 86, 86, 57, 56, 56, 60, 60, 59,
	61, 61, 146, 83, 83, 83, 83, 101, 102, 102,
	103, 103, 104, 104, 82, 82, 130, 130, 30, 30,
	66, 66, 67, 67, 231, 232, 121, 121, 122, 122,
	120, 120, 120, 148, 148, 148, 148, 149, 149, 149,
	149, 149, 149, 144, 144, 144, 144, 145, 145, 89,
	89, 89, 89, 87, 87, 88, 88, 150, 150, 150,
	150, 84, 84, 151, 151, 151, 116, 116, 156, 156,
	156, 65, 65, 65, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 158, 158, 158, 158, 160,
	160, 160, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 161, 161, 168, 168, 169,
	169, 170, 171, 162, 162, 163, 163, 164, 165, 172,
	172, 172, 174, 174, 166, 166, 167, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 96, 96, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 201, 201, 201, 201, 201, 201,
	201, 203, 203, 204, 204, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	209, 209, 210, 210, 211, 211, 212, 212, 214, 215,
	215, 215, 216, 220, 220, 213, 213, 217, 217, 217,
	218, 218, 219, 219, 219, 219, 219, 134, 134, 134,
	135, 135, 136, 72, 72, 132, 132, 131, 131, 131,
	133, 133, 90, 173, 173, 173, 173, 173, 173, 173,
	91, 91, 97, 92, 92, 93, 93, 93, 93, 93,
	93, 127, 128, 94, 94, 94, 129, 129, 137, 141,
	141, 140, 139, 139, 138, 138, 119, 119, 119, 119,
	118, 117, 79, 79, 233, 233, 142, 142, 80, 80,
	81, 75, 75, 74, 74, 152, 152, 152, 152, 68,
	68, 50, 50, 69, 69, 46, 46, 49, 47, 47,
	47, 47, 63, 63, 64, 64, 44, 44, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 175,
	175, 175, 40, 40, 40, 41, 41, 181, 181, 181,
	182, 182, 182, 182, 180, 180, 180, 180, 180, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 3, 5,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 3, 1, 6, 6, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 6, 3, 2, 1, 1,
	1, 3, 3, 2, 3, 3, 3, 3, 1, 3,
	3, 2, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 2, 4, 2, 4, 4, 4, 4, 3,
	3, 4, 3, 2, 2, 0, 2, 0, 2, 0,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 3,
	2, 0, 3, 1, 2, 2, 1, 1, 2, 4,
	2, 5, 6, 7, 3, 1, 4, 5, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 10, 13, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 1,
	3, 3, 0, 3, 3, 6, 7, 1, 3, 1,
	4, 2, 8, 5, 0, 4, 3, 0, 2, 0,
	8, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 1, 1, 1, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 2, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 3, 0, 2, 0, 2, 3,
	2, 0, 1, 3, 1, 1, 3, 1, 1, 3,
	2, 4, 0, 3, 2, 1, 4, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 4, 5, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 1, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 1, 1, 3, 1, 1, 1, 2,
	2, 2, 1, 1, 3, 5, 6, 8, 6, 6,
	4, 4, 1, 1, 1, 5, 1, 3, 1, 3,
	1, 1, 1, 1, 6, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 3, 1, 3, 3, 3, 2,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 2, 3, 0, 3, 3, 2, 2, 1,
	0, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 1, 1, 3, 5,
	2, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 0, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 2,
	2, 1, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 3, 5, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -207, 83, 89, 102, 189,
	196, -26, -28, 203, 204, 29, 211, 52, 85, 191,
	186, 229, 58, -206, -29, -27, 273, 249, 255, 199,
	-30, 217, 242, 276, 217, 70, 113, 78, 117, 236,
	70, 113, 217, -12, 273, -19, -14, -25, -9, -225,
	18, -226, -227, 58, 83, 102, 199, 117, 78, 236,
	-225, -43, 196, -40, 4, -186, -188, 16, 17, 19,
	28, 29, 33, 37, 40, 51, 52, 53, 55, 57,
	60, 61, 68, 69, 70, 71, 73, 78, 82, 83,
	89, 93, 94, 96, 103, 108, 109, 114, 117, 125,
	127, 128, 133, 136, 139, 141, 142, 143, 144, 145,
	147, 148, 150, 152, 155, 157, 158, 164, 167, 170,
	171, 174, 177, 178, 179, 181, 182, 186, 184, 185,
	187, 189, 191, 192, 194, 197, 198, 200, 201, 203,
	204, 206, 208, 210, 211, 214, 212, 218, 219, 225,
	229, 230, 231, 232, 235, 236, 239, 240, 241, 245,
	250, 251, 252, 253, 30, 31, 32, 34, 35, 38,
	39, 43, 44, 45, 47, 72, 74, 75, 88, 90,
	95, 104, 106, 110, 111, 118, 119, 120, 122, 131,
	154, 156, 165, 169, 173, 175, 180, 193, 207, 213,
	215, 221, 222, 226, 227, 242, 243, -109, 136, 201,
	225, -110, -108, -179, 221, 145, -70, -40, 196, 4,
	70, 51, 71, 103, 113, 114, 128, 218, 221, 225,
	18, -230, 225, 225, -230, -230, -42, 225, 223, -43,
	-229, 217, 217, -98, 70, 234, -27, -29, -28, -59,
	-60, 233, 121, 87, 163, -26, -28, -206, -208, 181,
	-205, -40, -208, -56, -57, 18, 80, 277, -150, -46,
	161, -40, -81, 273, -3, -150, 110, -40, -49, 110,
	-46, 100, 123, -151, -150, -40, 110, -50, 110, -49,
	-71, 110, -70, -155, -154, -182, 4, -186, -188, -187,
	242, 49, 59, 101, 116, 124, 126, 132, 134, 146,
	166, 168, 190, 205, 160, 277, 160, -40, -109, 45,
	-109, -111, -38, -39, 125, 177, 223, 258, 100, 253,
	-53, 6, 76, -73, 275, 100, -222, 160, 100, 100,
	100, -178, 100, 253, 125, 177, -112, -38, -39, -112,
	223, -43, -84, -150, -70, 110, 113, -40, 110, -59,
	-60, -83, -101, -102, 135, 159, -86, 18, 80, -86,
	-86, 37, 274, 274, 277, -208, -64, 273, -75, -74,
	-152, -123, 266, -125, 264, 265, 270, 151, 254, -134,
	-46, -126, 9, 273, -137, -203, -28, 88, 24, -135,
	-136, 193, -40, 8, 5, 6, 7, -44, -158, -167,
	228, 91, 153, 41, -201, -202, 4, -186, -181, -159,
	-169, -163, -166, 122, 49, 63, 66, 64, 67, 202,
	237, 42, 90, 169, 173, 215, 226, 227, 110, 154,
	111, 47, 104, 131, 82, 31, 32, 34, 35, 43,
	44, 72, 74, 75, 95, 118, 119, 120, 156, 180,
	207, 222, 243, -187, -170, -171, -164, -165, -172, -74,
	-81, 266, -46, 273, -79, -119, -118, -117, 271, 275,
	-80, -142, -123, 76, -35, 184, -34, 17, 19, 83,
	240, 88, 184, 184, 88, 278, -151, -48, -46, 203,
	-40, 25, 88, -37, 277, 40, 187, 88, 277, 88,
	274, 277, -221, -69, 217, 70, -47, -40, 266, -227,
	-221, 25, 277, 277, 133, -52, 139, 150, 108, -177,
	76, -184, -176, -143, 9, 228, 91, 160, -183, 5,
	265, -175, -182, 6, 8, 264, -177, 76, 61, -185,
	6, 4, -167, -143, 76, 136, 122, 275, -180, 4,
	-186, -188, -187, -189, 18, 20, 21, 22, 23, 24,
	25, 26, 27, 36, 41, 42, 46, 48, 50, 56,
	58, 62, 63, 64, 65, 66, 67, 76, 77, 79,
	80, 81, 84, 85, 87, 91, 92, 97, 99, 100,
	102, 105, 107, 112, 113, 115, 121, 123, 129, 130,
	135, 137, 138, 151, 153, 159, 160, 161, 162, 163,
	172, 176, 183, 188, 199, 202, 209, 216, 217, 220,
	223, 224, 228, 233, 234, 237, 238, 244, 246, 247,
	248, 249, -179, -224, 97, -221, -179, -179, -179, -179,
	133, 277, 277, -43, -37, 277, 273, 151, -41, 110,
	-40, 151, -83, -102, -101, -103, -123, 18, -123, -125,
	-27, -27, -27, -61, -146, -123, -205, 25, -63, -40,
	-66, 100, 277, 10, 48, 28, 264, 265, 266, 267,
	268, 261, 262, 263, 260, 256, 257, 258, 54, 140,
	195, 12, 13, 14, 22, 162, 134, 254, 205, 124,
	30, 112, 25, 4, -123, -123, -123, -123, -123, 168,
	-28, -123, -72, -79, -28, -131, 271, 273, -79, 273,
	6, 6, 273, -138, -123, -209, 250, 97, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 175, -174, 245, -174, -174, -160, 273,
	-160, -161, 273, -160, 273, -66, -46, -119, -123, -180,
	266, 277, 274, 277, 223, -99, 56, 50, -114, 110,
	50, -190, -40, 56, -191, 46, 234, 176, 99, -99,
	56, -99, 56, 56, -150, 223, 223, -49, -40, -116,
	247, -105, -19, 273, 76, 25, -76, -77, -153, -78,
	-46, 273, -40, -40, -49, -50, -70, -71, -12, -154,
	223, 277, -69, -63, -118, -117, 100, 225, -39, -38,
	-51, 179, 208, 185, 200, 277, 5, 8, 8, 6,
	-180, -223, -40, -39, -38, -150, -54, -55, -115, -114,
	-192, -190, 113, 234, 88, 160, 151, 88, -104, 193,
	194, 277, -33, 26, 79, 273, 277, 274, -116, -67,
	-148, -150, -28, -149, 273, -152, -156, -157, -159, -168,
	-162, -166, -167, 33, 39, 38, 219, 213, 118, 119,
	120, 207, 31, 180, 95, 82, 75, 74, 156, 35,
	34, -170, -171, -164, -165, 72, 222, 32, 44, 43,
	243, -70, 221, -123, -123, -123, -123, -123, -123, -123,
	-123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
	-123, -123, -123, -123, 134, 205, 30, 112, 223, 153,
	151, 228, 91, 235, 80, 157, -233, 216, 27, -129,
	-28, 273, -180, -134, 193, 273, 274, 277, -72, -133,
	272, -123, -131, -72, 274, 274, -72, 244, 18, 80,
	266, -95, 252, 143, 73, 109, 142, -96, 198, 8,
	-141, -140, 246, -210, 93, 105, 273, 274, 274, -123,
	-90, -173, 4, 252, 143, 73, 109, 142, 198, -91,
	-123, -92, -124, -125, 264, 265, 270, 273, 193, -93,
	-123, -72, -123, 36, 130, 224, -94, -123, 100, -72,
	-123, -123, -123, -72, -72, -72, 273, 8, 8, 8,
	-116, 274, 272, 281, -142, -34, -46, -40, -40, 151,
	-114, 110, -156, -40, 273, 273, 127, 127, -40, -40,
	110, -40, 110, -40, -40, -35, 184, -40, -40, 184,
	-85, 188, -123, -107, 160, -68, -46, 242, -40, -66,
	277, 258, -68, -37, -223, -47, -223, -38, 232, 53,
	179, -184, -95, 277, 274, 277, -41, 113, -70, -46,
	88, -40, -146, -15, -19, -14, -25, -9, -40, -82,
	105, 277, 59, -89, 126, 146, 101, 132, 190, 116,
	-120, 278, -145, -144, 25, -40, -28, -149, -148, -65,
	24, -95, 273, 253, -123, 223, -233, 216, -129, -123,
	153, 228, 91, 235, 80, 157, 100, 273, -124, -124,
	-72, 273, -72, -123, 277, 272, 272, 277, 274, -60,
	277, -59, -123, -72, -72, 274, 223, 223, 223, 223,
	273, 274, -139, -140, 84, -123, -215, 167, 273, 273,
	-123, 25, 274, 100, 274, -97, 172, 274, 10, 264,
	265, 266, 267, 268, 261, 262, 263, 260, 256, 257,
	258, 54, 140, 195, 12, 13, 14, 124, 112, -124,
	-124, -124, -72, 273, 274, -127, -128, 100, 97, 25,
	-94, -94, -94, 274, 100, -72, 277, 277, 277, 274,
	274, 274, 8, 274, 277, 274, 274, -82, -123, 223,
	223, 88, 151, -193, -191, -123, -63, 273, 273, -31,
	83, 203, -100, 88, -37, 88, -37, 223, -99, 56,
	223, -74, -85, 55, 274, 277, -116, -77, -142, 274,
	-40, -115, 273, -41, 273, 273, -40, 274, -130, 107,
	37, -148, 126, 126, -148, -89, 126, -87, 166, -87,
	-87, -145, -180, 279, -40, 273, 274, 271, 271, 8,
	-123, -123, -124, -124, 100, 273, -123, -132, -156, 22,
	22, 274, -72, 274, 277, 274, -123, -131, 274, 244,
	-60, -60, -60, 143, 109, 142, -96, 142, -96, -96,
	8, 6, 85, -123, 220, -216, -40, 273, 247, -59,
	274, -156, -123, -127, -123, -156, -124, -124, -124, -124,
	-124, -124, -124, -124, -124, -124, -124, -124, -124, -124,
	-124, -124, -124, -124, 80, 151, 157, -124, 277, -72,
	274, -128, -127, -123, -123, -156, 274, 274, 274, -72,
	-123, -123, -123, 274, 8, -130, 272, -40, -40, -114,
	88, -194, 56, -195, 48, 151, 153, 234, 176, 46,
	76, 183, 274, 274, -63, -63, 151, 76, 151, 76,
	69, 230, -40, -40, -46, -40, -40, -40, -106, 273,
	160, -19, -46, -85, 258, -62, -147, -40, -204, 273,
	-201, -202, -44, 273, -54, -62, 160, -211, 248, -123,
	-72, -148, -148, -88, 238, 160, 126, -148, -122, -121,
	-231, -232, 98, 149, 273, -63, -144, 272, 8, 8,
	274, 22, 22, -123, -132, 274, 277, -123, -123, 274,
	-123, 6, -123, 274, 274, 274, 274, -123, -220, -40,
	-123, 274, 274, -128, 100, 80, 157, 273, -123, 274,
	274, 277, 274, 274, 274, -211, -114, -40, -70, 153,
	127, 273, -124, -46, -113, -228, 57, 214, 274, 274,
	153, 153, -123, -156, -37, -37, 223, 223, 81, -62,
	56, -81, -28, 273, 274, 277, -45, -79, 48, -45,
	-123, 273, -62, 274, 274, -46, -212, -214, -40, -88,
	273, -123, -148, 277, 280, 258, -63, 274, 272, 272,
	-123, -123, 274, -156, 274, -60, -213, 171, 274, -124,
	100, 273, -132, 274, -123, -195, -123, -58, 273, 273,
	183, -36, 48, -40, -40, 236, 152, 274, -40, -113,
	-147, -33, -70, -33, 274, -72, 274, -113, 273, 277,
	25, -63, -121, -180, 274, 274, -60, 37, -124, -132,
	274, 274, 274, -198, 141, -63, -63, -46, -32, 238,
	-70, 203, -116, -45, -60, -113, -62, -214, -216, 274,
	-217, 178, 194, -72, 274, -196, -199, -197, 160, 101,
	170, 206, 274, 274, -58, -123, -76, -33, 274, 274,
	274, -218, -219, 30, 231, 61, -123, -218, -197, 160,
	-199, 160, 236, 78, -198, -116, -113, -219, 174, 96,
	193, 174, 96, -200, 148, 187, 40, 203, -200, -196,
	22, 16, 153, 76, -219,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 318, 0, 0,
	0, 288, -2, 0, 0, 251, 0, 251, 251, 255,
	0, 320, 219, 317, -2, 328, 0, 0, 0, 326,
	302, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 66, 0, 68, 69, 70, 71, 0,
	80, 81, 82, 84, 85, 86, 87, 88, 89, 90,
	0, 244, 817, 257, 732, 733, 734, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 93, 785, 821,
	832, 98, 108, 0, 884, -2, 112, 62, 817, 141,
	142, 0, 144, 157, 0, 0, 0, 155, 0, 0,
	153, 262, 250, 262, 247, 248, 249, 252, 0, 243,
	0, 319, 0, 0, 0, 218, -2, 298, 299, -2,
	0, 323, 323, 323, 0, 0, 299, 0, 307, 807,
	310, 715, 308, 692, 0, 325, 324, 0, 303, 387,
	0, 705, 348, 0, 2, 0, 866, 0, 0, 866,
	0, 0, 0, 0, 393, 54, 866, 45, 866, 701,
	58, 866, 60, 0, 72, 74, 740, 741, 742, 743,
	888, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 0, 0, 0, 256, 94, 856,
	96, 97, 99, 100, 0, 0, 0, 0, 0, 0,
	111, 136, 137, 63, 0, 0, 159, 0, 0, 0,
	0, 149, 0, 150, 0, 152, 245, 258, 259, 246,
	0, 254, 45, 391, 0, 866, 736, 264, 866, -2,
	0, 294, 335, 336, 0, 0, 0, 321, 322, 0,
	0, 0, 290, 291, 0, 309, 0, 0, 351, 691,
	693, 697, 698, 473, 0, 0, 0, 0, 0, 0,
	552, 553, 554, 0, 556, 557, 558, 861, 0, 562,
	563, 880, 705, 718, 719, 720, 721, 0, 0, 0,
	726, 727, 728, 675, 601, 572, -2, -2, 716, 415,
	416, 417, 418, -2, 890, 576, 578, 580, 581, 582,
	583, 0, 862, 876, 877, 883, 886, 887, 866, 873,
	867, 857, 864, 872, 770, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 739, 439, 440, 445, 446, 448, 351,
	349, 388, 389, 0, 706, 682, 676, 677, 0, 0,
	0, 688, 686, 687, 22, 240, 24, 0, 240, 240,
	0, 0, 0, 0, 0, 0, 397, 0, 267, 0,
	394, 0, 0, 56, 0, 43, 44, 0, 0, 0,
	318, 0, 0, 77, 0, 766, 703, 708, 711, 83,
	0, 0, 0, 0, 0, 103, 123, 124, 125, 104,
	106, 113, 115, 116, 117, 126, 127, 128, 129, 212,
	0, 214, 139, 140, 729, 0, 105, 107, 109, 110,
	130, 131, 0, 133, 134, 135, 456, 0, 64, 744,
	745, 746, 747, 748, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 143, 145, 0, 156, 146, 147, 148, 154,
	151, 0, 0, 253, 215, 0, 163, 0, 0, 866,
	735, 0, 297, 333, 334, 337, 340, 341, 338, 473,
	304, 305, 306, 329, 330, 229, 311, 0, 0, 712,
	397, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	685, 0, 0, 696, 477, 478, 479, 500, 501, 0,
	-2, 633, 0, 559, 560, 561, 0, 0, -2, 0,
	723, 470, 0, 0, 674, 603, 0, 0, 0, 0,
	0, 0, 0, 654, 660, 0, 0, 0, 0, 0,
	0, 0, 0, 429, 442, 452, 450, 449, 431, 0,
	430, 428, 0, 432, 0, 397, 0, 683, 0, 680,
	681, 0, 690, 0, 0, 0, 0, 239, 26, 866,
	0, 36, 0, 0, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 707, 279,
	0, 274, 269, 0, 0, 0, 351, 281, 283, 284,
	0, 0, 395, 55, 702, 45, 61, 59, 67, 73,
	0, 0, 78, 79, 709, 710, 0, 0, 101, 102,
	263, 0, 120, 0, 122, 0, 213, 731, 730, 470,
	65, 158, 91, 260, 261, 392, 0, 162, 164, 166,
	167, 168, 736, 0, 0, 0, 0, 0, 339, 342,
	343, 0, 332, 227, 228, 318, 0, 714, 345, 350,
	352, 362, 378, 365, 0, 694, 474, 403, 404, 405,
	406, 407, 470, 410, 411, 412, 413, 414, 422, 423,
	424, 425, 426, 427, 436, 0, 421, 421, 421, 433,
	434, 437, 438, 443, 444, 454, 455, 453, 453, 453,
	451, 475, 0, 480, 481, 482, 483, 484, 485, 486,
	487, 488, -2, -2, -2, 492, 493, 494, -2, -2,
	-2, 498, 499, -2, 0, 0, 685, 0, 0, 506,
	0, 509, 511, 513, 0, 0, 0, 0, 684, 523,
	666, 0, 695, 508, 0, 0, 555, 0, 0, 0,
	639, 633, 640, 0, -2, 564, 328, 0, 0, 0,
	0, 724, 457, 458, 459, 460, 461, 462, 471, 0,
	673, 669, 0, 611, 0, 0, 0, 577, 579, 0,
	0, 0, 643, 644, 645, 646, 647, 648, 649, 0,
	0, 0, 0, 525, 0, 0, 0, 0, 880, 0,
	633, 659, 0, 0, 0, 0, 0, 633, 0, 665,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	345, 390, 678, 0, 689, 25, 231, 0, 0, 0,
	28, 866, 171, 0, 0, 0, 0, 0, 242, 37,
	866, 45, 866, 45, 38, 23, 240, 230, 233, 0,
	53, 0, 396, 279, 0, 0, 699, 271, 268, 397,
	0, 0, 0, 57, 75, 704, 76, 95, 118, 119,
	121, 114, 132, 0, 160, 0, 0, 736, 0, 0,
	0, 265, 331, 0, 313, 314, 315, 316, 713, 347,
	0, 0, 0, 0, 0, 0, 384, 384, 384, 382,
	378, 0, 364, 377, 0, 376, -2, 365, 0, 398,
	400, 408, 0, 0, -2, 0, 0, 0, 524, -2,
	507, 510, 512, 514, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 634, 0, 637, 638, 0, -2, 0,
	0, 327, 328, 328, 328, 570, 0, 0, 0, 0,
	0, 0, 0, 670, 0, 0, 571, 0, 0, 0,
	0, 0, 585, 0, 586, 0, 0, 587, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 527,
	528, 529, 0, 0, 588, 657, 658, 0, 0, 0,
	0, 0, 0, 593, 0, 664, 0, 0, 0, 597,
	598, 599, 0, 419, 0, 435, 447, 347, 0, 0,
	0, 0, 0, 169, 184, 0, 0, 0, 0, 30,
	0, 0, 0, 0, 34, 0, 40, 0, 0, 0,
	0, 278, 266, 277, 0, 0, 279, 282, 285, 0,
	92, 165, 0, 0, 163, 0, 0, 312, 605, 0,
	0, 353, 0, 0, 0, 0, 0, 379, 383, 380,
	381, 363, 360, 0, 374, 0, 367, 0, 0, 0,
	476, -2, 0, 0, 0, 0, -2, 0, 635, 0,
	0, 667, 0, 628, 0, -2, 634, 641, 565, 0,
	0, 0, 0, 463, 464, 465, 466, 467, 468, 469,
	0, 725, 668, 672, 0, 609, 610, 614, 0, 0,
	575, 0, 642, 651, 652, 526, 530, 531, 532, 533,
	534, 535, 536, 537, 538, -2, -2, -2, 542, 543,
	544, -2, -2, -2, 0, 0, 0, 653, 0, 0,
	631, 655, 656, 661, 662, 0, 590, 591, 592, 663,
	0, 0, 0, 441, 0, 605, 679, 235, 237, 27,
	0, 170, 0, 173, 0, 0, 176, 177, 0, 0,
	0, 0, 186, 193, 0, 0, 0, 42, 0, 0,
	241, 0, 45, 45, 232, 0, 0, 234, 0, 0,
	0, 270, 700, 280, 0, 0, 220, 226, 226, 0,
	573, 574, 0, 0, 0, 0, 0, 300, 0, 346,
	344, 368, 0, 370, 0, 0, 0, 372, 0, 358,
	0, 357, 354, 355, 0, 0, 366, 401, 0, 0,
	409, 0, 0, -2, 0, 517, 0, -2, -2, 627,
	634, 722, 328, 566, 568, 569, 472, 671, 616, 613,
	0, 600, 584, 650, 0, 0, 0, 0, 634, 630,
	589, 0, 595, 596, 420, 301, 29, 0, 174, 175,
	178, 0, 180, 195, 187, 0, 190, 191, 188, 0,
	31, 32, 41, 47, 33, 39, 0, 0, 0, 0,
	0, 286, 287, 0, 193, 0, 229, 717, 0, 229,
	0, 0, 0, 161, 193, 0, 604, 606, 0, 369,
	0, 386, 371, 0, 361, 0, 0, 375, 402, 399,
	-2, -2, 518, 636, 629, 0, 328, 0, 602, -2,
	0, 0, 0, 632, 0, 172, 0, 199, 0, 0,
	0, 49, 0, 236, 238, 0, 273, 397, 276, 182,
	221, 222, 225, 223, 226, 328, 193, 216, 0, 0,
	0, 0, 359, 356, 373, 567, 619, 0, -2, 0,
	550, 594, 179, 204, 0, 0, 0, 195, 35, 0,
	46, 0, 275, 229, 0, 183, 0, 607, 608, 385,
	0, 0, 0, 615, 551, 181, 200, 201, 0, 196,
	197, 198, 194, 192, 199, 48, 397, 224, 565, 193,
	612, 617, 620, -2, 835, 763, 0, 618, 202, 0,
	203, 0, 0, 0, 204, 272, 217, 0, 622, 623,
	624, 625, 626, 205, 0, 208, 209, 0, 206, 189,
	0, 207, 210, 211, 621,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 262, 3, 268, 263, 3,
	273, 274, 266, 264, 277, 265, 275, 267, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 281, 276,
	256, 258, 257, 3, 278, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 271, 3, 272, 261, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 279, 260, 280, 270,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 259, 269,
}
var sqlTok3 = [...]int{
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:647
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:653
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:659
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:679
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:689
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:695
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:699
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:705
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:709
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:716
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:721
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:726
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:731
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:735
		{
			unimplemented()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:737
		{
			unimplemented()
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:739
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:742
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:747
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: false, Column: sqlDollar[3].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:752
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:759
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:761
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:764
		{
			sqlVAL.union.val = &AlterTableDropConstraint{IfExists: true, Constraint: sqlDollar[5].str}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:769
		{
			sqlVAL.union.val = &AlterTableDropConstraint{IfExists: false, Constraint: sqlDollar[3].str}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:774
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:775
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:778
		{
			unimplemented()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:779
		{
			unimplemented()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:780
		{
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:783
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:784
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:787
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:788
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:799
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:806
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:810
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = &DropIndex{IndexList: sqlDollar[3].union.tableWithIdxList(), IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:818
		{
			sqlVAL.union.val = &DropIndex{IndexList: sqlDollar[5].union.tableWithIdxList(), IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:832
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:842
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:846
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:886
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:928
		{
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1056
		{
			unimplemented()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1062
		{
			unimplemented()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = Low
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = Normal
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = High
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = DBool(true)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = DBool(false)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1154
		{
			expr := &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
			var ctx EvalContext
			d, err := expr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type")
				return 1
			}
			if _, ok := d.(DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.union.val = d
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			unimplemented()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1179
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1180
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1258
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = []string(nil)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1338
		{
			unimplemented()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1369
		{
			unimplemented()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1371
		{
			if ContainsVars(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1382
		{
			unimplemented()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1419
		{
			unimplemented()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1439
		{
			unimplemented()
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = []string(nil)
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = []string(nil)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1475
		{
			unimplemented()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1477
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1478
		{
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1485
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1486
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1488
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1489
		{
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1492
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1495
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1499
		{
			unimplemented()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1500
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = NumVal("-" + sqlDollar[2].str)
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = DInt(sqlDollar[1].union.ival().Val)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = true
		}
	case 219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = false
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1577
		{
			unimplemented()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1578
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1581
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1582
		{
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = Ascending
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = Descending
		}
	case 229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 230:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1601
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 238:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = true
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = false
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1648
		{
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1649
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1682
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1691
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1692
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.str = ""
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.str = ""
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.qname()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retExprs()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1794
		{
			unimplemented()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1795
		{
			unimplemented()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1796
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1799
		{
			unimplemented()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1800
		{
			unimplemented()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1801
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{sqlDollar[5].union.exprs()}}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2043
		{
			unimplemented()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2044
		{
			unimplemented()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2045
		{
			unimplemented()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2048
		{
			unimplemented()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2049
		{
			unimplemented()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2052
		{
			unimplemented()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2064
		{
			unimplemented()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2065
		{
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2069
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = true
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = false
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = false
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = true
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2092
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2093
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2140
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2151
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2193
		{
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{sqlDollar[2].union.exprs()}}}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2243
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2297
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2340
		{
			unimplemented()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2370
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2374
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.str = astFullJoin
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.str = astLeftJoin
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.str = astRightJoin
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.str = astInnerJoin
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2427
		{
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2428
		{
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2518
		{
			unimplemented()
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2519
		{
			unimplemented()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2522
		{
			unimplemented()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2523
		{
			unimplemented()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2524
		{
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2532
		{
			unimplemented()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = &BytesType{Name: "BLOB"}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = &BytesType{Name: "BYTES"}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = &BytesType{Name: "BYTEA"}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = &StringType{Name: "TEXT"}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = &StringType{Name: "STRING"}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val), Scale: int(sqlDollar[4].union.ival().Val)}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = &DecimalType{}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &IntType{Name: "INT"}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = &IntType{Name: "INT64"}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = &IntType{Name: "INTEGER"}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = &IntType{Name: "SMALLINT"}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = &IntType{Name: "BIGINT"}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = &FloatType{Name: "REAL"}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DECIMAL"
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DEC"
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "NUMERIC"
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = &BoolType{Name: "BOOLEAN"}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &BoolType{Name: "BOOL"}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = IntVal{}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = &IntType{Name: "BIT", N: int(sqlDollar[4].union.ival().Val)}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &IntType{Name: "BIT"}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			sqlVAL.union.val.(*StringType).N = int(sqlDollar[3].union.ival().Val)
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = &StringType{Name: "VARCHAR"}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2713
		{
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2714
		{
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = &DateType{}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = &TimestampType{}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = &IntervalType{}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2733
		{
			unimplemented()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2734
		{
			unimplemented()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2735
		{
			unimplemented()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2736
		{
			unimplemented()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2737
		{
			unimplemented()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2738
		{
			unimplemented()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2739
		{
			unimplemented()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2740
		{
			unimplemented()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2741
		{
			unimplemented()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2742
		{
			unimplemented()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2743
		{
			unimplemented()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2744
		{
			unimplemented()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2745
		{
			unimplemented()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2746
		{
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2749
		{
			unimplemented()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2750
		{
			unimplemented()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2777
		{
			unimplemented()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2778
		{
			unimplemented()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2910
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DBool(true)}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DBool(true)}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DBool(false)}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DBool(false)}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3021
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3025
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3153
		{
			unimplemented()
		}
	case 567:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3154
		{
			unimplemented()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3190
		{
			unimplemented()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3191
		{
			unimplemented()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3195
		{
			unimplemented()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3212
		{
			unimplemented()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3213
		{
			unimplemented()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3214
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3215
		{
			unimplemented()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3236
		{
			unimplemented()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3280
		{
			unimplemented()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3281
		{
		}
	case 602:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3284
		{
			unimplemented()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3285
		{
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3289
		{
			unimplemented()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3290
		{
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3293
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3294
		{
			unimplemented()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3297
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3300
		{
			unimplemented()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3301
		{
			unimplemented()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3302
		{
		}
	case 612:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3306
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3317
		{
			unimplemented()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3318
		{
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3321
		{
			unimplemented()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3322
		{
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3330
		{
			unimplemented()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3331
		{
			unimplemented()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3332
		{
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3335
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3336
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3342
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3343
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3344
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3345
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3346
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &Row{sqlDollar[3].union.exprs()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &Row{nil}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &Tuple{append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = &Row{sqlDollar[3].union.exprs()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = &Row{nil}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &Tuple{append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = Exprs{DString(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), DInt(1), sqlDollar[2].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &Tuple{sqlDollar[2].union.exprs()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3673
		{
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3837
		{
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = &IntVal{Val: sqlDollar[1].union.ival().Val, Str: sqlDollar[1].union.ival().Str}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = DBytes(sqlDollar[1].str)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3873
		{
			unimplemented()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[5].str), Type: sqlDollar[1].union.colType()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = DBool(true)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = DBool(false)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = DNull
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = IntVal{Val: -sqlDollar[2].union.ival().Val, Str: "-" + sqlDollar[2].union.ival().Str}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
